<?xml version="1.0"?>
<doc>
    <assembly>
        <name>netDxf</name>
    </assembly>
    <members>
        <member name="T:netDxf.AciColor">
            <summary>
            Represents an ACI color (Autocad Color Index) that also supports true color.
            </summary>
        </member>
        <member name="M:netDxf.AciColor.#ctor">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class with black/white color index 7.
            </summary>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Byte,System.Byte,System.Byte)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
             <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Single,System.Single,System.Single)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
             <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Double,System.Double,System.Double)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
             <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="index">Color index.</param>
            <remarks>
            By default the UseTrueColor will be set to false.<br />
            Accepted color index values range from 1 to 255.<br />
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for bylayer and byblock colors.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.FromHsl(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL (hue, saturation, lightness) value to an <see cref="T:netDxf.AciColor">AciColor</see>.
            </summary>
            <param name="hue">Hue (input values range from 0 to 1).</param>
            <param name="saturation">Saturation percentage (input values range from 0 to 1).</param>
            <param name="lightness">Lightness percentage (input values range from 0 to 1).</param>
            <returns>An <see cref="T:netDxf.AciColor">AciColor</see> that represents the acutal hsl value.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToHsl(netDxf.AciColor,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts the RGB (red, green, blue) components of an <see cref="T:netDxf.AciColor">AciColor</see> to HSL (hue, saturation, lightness) values.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="hue">Hue (output values range from 0 to 1).</param>
            <param name="saturation">Saturation percentage (output values range from 0 to 1).</param>
            <param name="lightness">Lightness percentage (output values range from 0 to 1).</param>
        </member>
        <member name="M:netDxf.AciColor.IndexRgb">
            <summary>
            Gets the complete list of indexed colors.
            </summary>
            <returns>A dictionary that contains the indexed colors, the key represents the color index and the value the rgb components of the color.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.AciColor.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.AciColor.Equals(netDxf.AciColor)">
            <summary>
            Check if the components of two colors are equal.
            </summary>
            <param name="obj">Another color to compare to.</param>
            <returns>True if the three components are equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.AciColor.RgbToAci(System.Byte,System.Byte,System.Byte)">
             <summary>
             Obtains a color index from the rgb components.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
             <remarks>This conversion will never be accurate.</remarks>
        </member>
        <member name="P:netDxf.AciColor.ByLayer">
            <summary>
            Gets the ByLayer color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.ByBlock">
            <summary>
            Gets the ByBlock color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Red">
            <summary>
            Defines a default red color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Yellow">
            <summary>
            Defines a default yellow color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Green">
            <summary>
            Defines a default green color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Cyan">
            <summary>
            Defines a default cyan color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Blue">
            <summary>
            Defines a default blue color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Magenta">
            <summary>
            Defines a default magenta color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Default">
            <summary>
            Defines a default white/black color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.DarkGrey">
            <summary>
            Defines a default dark grey color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.LightGrey">
            <summary>
            Defines a default light grey color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.R">
            <summary>
            Gets the red component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.G">
            <summary>
            Gets the green component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.B">
            <summary>
            Gets the blue component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.UseTrueColor">
            <summary>
            Get or set if the AciColor should use true color values.
            </summary>
            <remarks>
            By default the constructors that use r, g, b values will set this boolean to true
            while the constants and constructor that use a short will set it to false.
            </remarks>
        </member>
        <member name="P:netDxf.AciColor.Index">
            <summary>
            Gets or sets the color index.
            </summary>
            <remarks>
            Accepted color index values range from 1 to 255.
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for bylayer and byblock colors.
            </remarks>
        </member>
        <member name="T:netDxf.Blocks.BlockEnd">
            <summary>
            Represents the termination element of the block definiton.
            </summary>
        </member>
        <member name="T:netDxf.DxfObject">
            <summary>
            Represents the base class for all dxf objects.
            </summary>
        </member>
        <member name="M:netDxf.DxfObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DxfObject</c> class.
            </summary>
            <param name="codeName">Object name.</param>
        </member>
        <member name="M:netDxf.DxfObject.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.DxfObject.ToString">
            <summary>
            Obtains a string that represents the dxf object.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="P:netDxf.DxfObject.CodeName">
            <summary>
            Gets the dxf entity type string.
            </summary>
        </member>
        <member name="P:netDxf.DxfObject.Handle">
            <summary>
            Gets or sets the handle asigned to the dxf object.
            </summary>
            <remarks>It is a unique hexadecimal number asigned automatically to every dxf object. Only the getter is public.</remarks>
        </member>
        <member name="M:netDxf.Blocks.BlockEnd.#ctor(netDxf.Tables.Layer)">
            <summary>
            Initializes a new instance of the <c>BlockEnd</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockEnd.Layer">
            <summary>
            Gets or sets the block end <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="T:netDxf.Blocks.BlockTypeFlags">
            <summary>
            Block-type flags (bit-coded values, may be combined).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.None">
            <summary>
            Indicates none of the following flags apply.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.AnonymousBlock">
            <summary>
            This is an anonymous block generated by hatching, associative dimensioning, other internal operations, or an application.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.NonConstantAttributeDefinitions">
            <summary>
            This block has non-constant attribute definitions
            (this bit is not set if the block has any attribute definitions that are constant, or has no attribute definitions at all).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.XRef">
            <summary>
            This block is an external reference (xref).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.XRefOverlay">
            <summary>
            This block is an xref overlay.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.ExternallyDependent">
            <summary>
            This block is externally dependent.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.ResolvedExternalReference">
            <summary>
            This is a resolved external reference, or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.DefinitionExternalReference">
            <summary>
            This definition is a referenced external reference (ignored on input).
            </summary>
        </member>
        <member name="T:netDxf.CodeValuePair">
            <summary>
            Represents the minimun information element in a dxf file.
            </summary>
        </member>
        <member name="M:netDxf.CodeValuePair.#ctor(System.Int32,System.String)">
            <summary>
            Initalizes a new instance of the <c>CodeValuePair</c> class.
            </summary>
            <param name="code">Dxf code.</param>
            <param name="value">Value for the specified code.</param>
        </member>
        <member name="P:netDxf.CodeValuePair.Code">
            <summary>
            Gets the dxf code.
            </summary>
        </member>
        <member name="P:netDxf.CodeValuePair.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:netDxf.Entities.AlignedDimension">
            <summary>
            Represents a dimension <see cref="T:netDxf.Entities.EntityObject">entity</see> that is aligned the reference line.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Dimension">
            <summary>
            Represents the base class for a dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <reamarks>
            Once a dimension is added to the dxf document, its properties should not be modified or the changes will not be reflected in the saved dxf file.
            </reamarks>
        </member>
        <member name="T:netDxf.Entities.EntityObject">
            <summary>
            Represents a generic entity.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EntityObject.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.LineType">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Lineweight">
            <summary>
            Gets or sets the entity line weight, one unit is always 1/100 mm (default = ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.LineTypeScale">
            <summary>
            Gets or sets the entity linetype scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.IsVisible">
            <summary>
            Gets or set the entity visibility.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.XData">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.XData">extende data</see> (key: ApplicationRegistry.Name, value: XData).
            </summary>
        </member>
        <member name="M:netDxf.Entities.Dimension.#ctor(netDxf.Entities.DimensionType)">
            <summary>
            Initializes a new instance of the <c>Dimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Dimension.BuildBlock(System.String)">
            <summary>
            Gets the the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be asigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.Dimension.FormatDimensionText(System.Double)">
            <summary>
            Format the value for the dimension text.
            </summary>
            <param name="dimValue">Dimension value.</param>
            <returns>The formatted text.</returns>
        </member>
        <member name="P:netDxf.Entities.Dimension.DefinitionPoint">
            <summary>
            Definition point (in WCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.MidTextPoint">
            <summary>
            Middle point of dimension text (in OCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.Style">
            <summary>
            Gets or sets the style associated with the dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.DimensionType">
            <summary>
            Gets the dimension type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.Value">
            <summary>
            Gets the actual measurement.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.AttachmentPoint">
            <summary>
            Gets or sets the dimension text attachment point.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.LineSpacingStyle">
            <summary>
            Get or sets the dimension text <see cref="T:netDxf.Entities.MTextLineSpacingStyle">line spacing style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.LineSpacingFactor">
            <summary>
            Gets or sets the dimension text line spacing factor.
            </summary>
            <remarks>
            Percentage of default line spacing to be applied. Valid values range from 0.25 to 4.00, the default value 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.Block">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <remarks>
            This value will be null until the dimension entity is added to the document.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference line define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector3">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector3">point</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Vector3,netDxf.Vector3,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector3">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector3">point</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.BuildBlock(System.String)">
            <summary>
            Gets the the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be asigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.FirstReferencePoint">
            <summary>
            Gets or sets the first definition point of the dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.SecondReferencePoint">
            <summary>
            Gets or sets the second definition point of the dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.Offset">
            <summary>
            Gets or sets the distance between the reference line and the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.Value">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Angular3PointDimension">
            <summary>
            Represents a 3 point angular dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Entities.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="offset">Distance between the center of the arc and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Entities.Arc,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="arc">Angle <see cref="T:netDxf.Entities.Arc">arc</see> to measure.</param>
            <param name="offset">Distance between the center of the arc and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="centerPoint">Center of the angle arc to mesaure.</param>
            <param name="startPoint">Angle start point.</param>
            <param name="endPoint">Angle end point.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="centerPoint">Center of the angle arc to mesaure.</param>
            <param name="firstPoint">Angle start point.</param>
            <param name="secondPoint">Angle end point.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.BuildBlock(System.String)">
            <summary>
            Gets the the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be asigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.FirstPoint">
            <summary>
            Definition point for linear and angular dimensions (in WCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.SecondPoint">
            <summary>
            Definition point for linear and angular dimensions (in WCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector3">point</see> of the arc.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.Offset">
            <summary>
            Gets or sets the distance between the center point and the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.Value">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Angular2LineDimension">
            <summary>
            Represents a 3 point angular dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="startFirstLine">Start <see cref="T:netDxf.Vector3">point</see> of the first line that defines de angle to measure.</param>
            <param name="endFirstLine">End <see cref="T:netDxf.Vector3">point</see> of the first line that defines de angle to measure.</param>
            <param name="startSecondLine">Start <see cref="T:netDxf.Vector3">point</see> of the second line that defines de angle to measure.</param>
            <param name="endSecondLine">End <see cref="T:netDxf.Vector3">point</see> of the second line that defines de angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="startFirstLine">Start <see cref="T:netDxf.Vector3">point</see> of the first line that defines de angle to measure.</param>
            <param name="endFirstLine">End <see cref="T:netDxf.Vector3">point</see> of the first line that defines de angle to measure.</param>
            <param name="startSecondLine">Start <see cref="T:netDxf.Vector3">point</see> of the second line that defines de angle to measure.</param>
            <param name="endSecondLine">End <see cref="T:netDxf.Vector3">point</see> of the second line that defines de angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.BuildBlock(System.String)">
            <summary>
            Gets the the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be asigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.StartFirstLine">
            <summary>
            Start <see cref="T:netDxf.Vector3">point</see> of the first line that defines de angle to measure.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.EndFirstLine">
            <summary>
            End <see cref="T:netDxf.Vector3">point</see> of the first line that defines de angle to measure.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.StartSecondLine">
            <summary>
            Start <see cref="T:netDxf.Vector3">point</see> of the second line that defines de angle to measure.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.EndSecondLine">
            <summary>
            End <see cref="T:netDxf.Vector3">point</see> of the second line that defines de angle to measure.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.Offset">
            <summary>
            Gets or sets the distance between the center point and the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.Value">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="T:netDxf.Entities.DiametricDimension">
            <summary>
            Represents a diametric dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Circle,System.Double)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Circle,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector3">point</see> of the circunference.</param>
            <param name="diameter">Diameter value.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Vector3,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector3">point</see> of the circunference.</param>
            <param name="diameter">Diameter value.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.FormatDimensionText(System.Double)">
            <summary>
            Format the value for the dimension text.
            </summary>
            <param name="dimValue">Dimension value.</param>
            <returns>The formated text.</returns>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.BuildBlock(System.String)">
            <summary>
            Gets the the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be asigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.CircunferencePoint">
            <summary>
            Definition point for diameter, radius, and angular dimensions (in WCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector3">point</see> of the circunference.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.Diameter">
            <summary>
            Gets or sets the diameter of the circunference.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.Rotation">
            <summary>
            Gets or sets the rotation of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.Value">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchGradientPatternType">
            <summary>
            Gradient pattern types.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Linear">
            <summary>
            Linear.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Cylinder">
            <summary>
            Cylinder.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvCylinder">
            <summary>
            Inverser cylinder.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Spherical">
            <summary>
            Spherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvSpherical">
            <summary>
            Inverse spherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Hemispherical">
            <summary>
            Hemispherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvHemispherical">
            <summary>
            Inverse hemispherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Curved">
            <summary>
            Curved.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvCurved">
            <summary>
            Inverse curved.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchGradientPattern">
            <summary>
            Represents the hatch gradient pattern style.
            </summary>
            <remarks>
            Grandient patterns are only supported by AutoCad2004 and higher dxf versions. It will default to a solid pattern if saved as AutoCad2000.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.HatchPattern">
            <summary>
            Represents a <see cref="T:netDxf.Entities.Hatch">hatch</see> pattern style.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the dxf file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.FromFile(System.String,System.String)">
            <summary>
            Creates a new hatch pattern from the definition in a pat file.
            </summary>
            <param name="file">Pat file where the definition is located.</param>
            <param name="patternName">Name of the pattern definition that wants to be read (ignore case).</param>
            <returns>A Hatch pattern defined by the pat file.</returns>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Solid">
            <summary>
            Solid hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Line">
            <summary>
            Lines hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Net">
            <summary>
            Net or squares hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Dots">
            <summary>
            Dots hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Name">
            <summary>
            Gets or sets the hatch pattern name.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Description">
            <summary>
            Gets or sets the hatch description (optional, this information is not saved in the dxf file).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Style">
            <summary>
            Gets the hatch style (always Normal).
            </summary>
            <remarks>Only normal style is implemented.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Type">
            <summary>
            Gets or sets the hatch pattern type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Fill">
            <summary>
            Gets the solid fill flag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Angle">
            <summary>
            Gets or sets the pattern angle between 0 and 360 degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Scale">
            <summary>
            Gets or sets the pattern scale (not aplicable in Solid fills).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.LineDefinitions">
            <summary>
            Gets or sets the definition of the lines that make up the pattern (not aplicable in Solid fills).
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a default linear gradient. 
            </summary>
            <param name="description">Description of the pattern (optional, this information is not saved in the dxf file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,System.Double,netDxf.Entities.HatchGradientPatternType,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a single color gradient. 
            </summary>
            <param name="color">Gradient <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="tint">Gradient tint.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the dxf file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,netDxf.AciColor,netDxf.Entities.HatchGradientPatternType,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a two color gradient. 
            </summary>
            <param name="color1">Gradient <see cref="T:netDxf.AciColor">color</see> 1.</param>
            <param name="color2">Gradient <see cref="T:netDxf.AciColor">color</see> 2.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the dxf file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.GradientColorAciXData(System.Collections.Generic.Dictionary{System.String,netDxf.XData})">
            <summary>
            Modifies or creates the xData hatch information entries that hold the values for the gradient color indexes.
            </summary>
            <param name="xdata">Hatch <see cref="T:netDxf.XData">XData</see></param>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.GradientType">
            <summary>
            Gets or set the gradient pattern <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Color1">
            <summary>
            Gets or sets the gradient <see cref="T:netDxf.AciColor">color</see> 1.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Color2">
            <summary>
            Gets or sets the gradient <see cref="T:netDxf.AciColor">color</see> 2.
            </summary>
            <remarks>
            If color 2 is defined, automatically the single color property will be set to false.  
            </remarks>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.SingleColor">
            <summary>
            Gets or sets the gradient pattern color type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Tint">
            <summary>
            Gets or sets the gradient pattern tint.
            </summary>
            <remarks>It only applies to single color gradient patterns.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Centered">
            <summary>
            Gets or sets the gradient definition; corresponds to the centered option on the gradient.
            </summary>
            <remarks>
            Each gradient has two definitions, shifted and unshifted. A shift value describes the blend of the two definitions that should be used.
            A value of 0.0 (false) means only the unshifted version should be used, and a value of 1.0 (true) means that only the shifted version should be used.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.ImageClippingBoundaryType">
            <summary>
            Image clipping boundary type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageClippingBoundaryType.Rectangular">
            <summary>
            Rectangular.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageClippingBoundaryType.Polygonal">
            <summary>
            Polygonal
            </summary>
        </member>
        <member name="T:netDxf.Entities.ImageClippingBoundary">
            <summary>
            Represent a clipping boundary to display specific portions of an <see cref="T:netDxf.Entities.Image">image</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ImageClippingBoundary.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>ImageClippingBoundary</c> class as a rectangular clipping boundary.
            </summary>
            <param name="x">Rectangle x-coordinate of the top-left corner in image local coordinates.</param>
            <param name="y">Rectangle y-coordinate of the top-left corner in image local coordinates.</param>
            <param name="width">Rectangle width in image local coordinates.</param>
            <param name="height">Rectangle height in image local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.ImageClippingBoundary.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>ImageClippingBoundary</c> class as a rectangular clipping boundary.
            </summary>
            <param name="topLeftCorner">Rectangle top-left corner in image local coordinates.</param>
            <param name="bottomRightCorner">Rectangle bottom-right corner in image local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.ImageClippingBoundary.#ctor(System.Collections.Generic.List{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>ImageClippingBoundary</c> class as a polygonal clipping boundary.
            </summary>
            <param name="vertexes">The list of vertexes of the polygonal boundary.</param>
        </member>
        <member name="P:netDxf.Entities.ImageClippingBoundary.Type">
            <summary>
            Gets the clipping boundary type, rectangular or polygonal.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ImageClippingBoundary.Vertexes">
            <summary>
            Gets the list of vertexes of the polygonal boundary.
            </summary>
        </member>
        <member name="T:netDxf.Entities.ImageDisplayFlags">
            <summary>
            Image display options.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.ShowImage">
            <summary>
            Show image.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.ShowImageWhenNotAlignedWithScreen">
            <summary>
            Show image when not aligned with screen.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.UseClippingBoundary">
            <summary>
            Use clipping boundary.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.TransparencyOn">
            <summary>
            Transparency on.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Image">
            <summary>
            Represents a raster image <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDef,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Image.SetScale(netDxf.Vector2)">
            <summary>
            Sets the scale of the image.
            </summary>
            <param name="scale">X and Y scale of the image.</param>
        </member>
        <member name="M:netDxf.Entities.Image.SetScale(System.Double)">
            <summary>
            Sets the scale of the image.
            </summary>
            <param name="scale">Uniform scale of the image.</param>
        </member>
        <member name="M:netDxf.Entities.Image.SetScale(System.Double,System.Double)">
            <summary>
            Sets the scale of the image.
            </summary>
            <param name="scaleX">X scale of the image.</param>
            <param name="scaleY">Y scale of the image.</param>
        </member>
        <member name="P:netDxf.Entities.Image.Position">
            <summary>
            Gets or sets the image <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Height">
            <summary>
            Gets or sets the height of the image in drawing units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Width">
            <summary>
            Gets or sets the width of the image in drawing units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Rotation">
            <summary>
            Gets or sets the image rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Definition">
            <summary>
            Gets the <see cref="T:netDxf.Objects.ImageDef">image definition</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Clipping">
            <summary>
            Gets or sets the clipping state: false = off, true = on.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Brightness">
            <summary>
            Gets or sets the brightness value (0-100; default = 50)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Contrast">
            <summary>
            Gets or sets the contrast value (0-100; default = 50)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Fade">
            <summary>
            Gets or sets the fade value (0-100; default = 0)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.DisplayOptions">
            <summary>
            Gets or sets the image display options.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.ClippingBoundary">
            <summary>
            Gets or sets the image clipping boundary.
            </summary>
            <remarks>
            Set as null to restore the default clipping boundary.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.MLineJustification">
            <summary>
            Justification.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MLineFlags">
            <summary>
            Flags (bit-coded values).
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.Has">
            <summary>
            Has at least one vertex (code 72 is greater than 0).
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.Closed">
            <summary>
            Closed.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.NoStartCaps">
            <summary>
            Suppress start caps.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.NoEndCaps">
            <summary>
            Suppress end caps.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MLine">
            <summary>
            Represents a multiline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="isClosed">Sets if the multiline is closed</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="scale">Multiline scale.</param>
            <param name="isClosed">Sets if the multiline is closed</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Objects.MLineStyle,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">MLine <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="style">MLine <see cref="T:netDxf.Objects.MLineStyle">style.</see></param>
            <param name="scale">MLine scale.</param>
            <param name="isClosed">Sets if the multiline is closed</param>
        </member>
        <member name="M:netDxf.Entities.MLine.CalculateVertexesInfo">
            <summary>
            Calculates the internal information of the multiline vertexes.
            </summary>
            <remarks>
            <para>
            This function will be called when the entity created or when setting its vertexes;
            but, afterwards, this function will need to be called manually if any modification are done to the multiline.
            </para>
            <para>
            If the vertex distance list needs to be edited to represent trimmed multilines this function needs to be called prior any modification.
            It will calculate the minimun information needed to build a correct multiline.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MLine.SetVertexes(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Sets the positions of the multiline vertexes. 
            </summary>
            <param name="points">A list of <see cref="T:netDxf.Vector3">points</see> that make up the multiline vertex list.</param>
        </member>
        <member name="P:netDxf.Entities.MLine.Vertexes">
            <summary>
            Gets or sets the multiline <see cref="T:netDxf.Entities.MLineVertex">segments</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Elevation">
            <summary>
            Gets or sets the multiline elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Scale">
            <summary>
            Gets or sets the multiline scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.IsClosed">
            <summary>
            Gets or sets if the multiline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.NoStartCaps">
            <summary>
            Gets or sets the suppression of start caps.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.NoEndCaps">
            <summary>
            Gets or sets the suppression of end caps.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Justification">
            <summary>
            Gets or sets the multiline justification.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Style">
            <summary>
            Gets or set the multiline style.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Flags">
            <summary>
            MLine flags.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MLineVertex">
            <summary>
            Represents a <see cref="T:netDxf.Entities.MLine">multiline</see> vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Location">
            <summary>
            Gets the MLine vertex position.
            </summary>
            <remarks>
            If this property is modified the function MLine.CalculateVertexesInfo() will need to be called manually to upadate the internal information.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Direction">
            <summary>
            Gets the MLine vertex direction.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Miter">
            <summary>
            Gets the MLine vertex miter.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Distances">
            <summary>
            Gets the <see cref="T:netDxf.Entities.MLine">multiline</see> vertex distances lists.
            </summary>
            <remarks>
            <para>
            There is a list for every MLineStyle element, and every list contains an array of real values
            that parameterize the start and end point of every element of the style.
            </para>
            <para>
            The first value (index 0) represents the distance from the segment vertex along the miter vector to the
            point where the line element's path intersects the miter vector.<br/>
            The second value (index 1) is the distance along the line element's direction from the point,
            defined by the first value, to the actual start of the line element.<br/>
            The successive values list the start and stop points of the line element breaks or cuts in this segment of the mline.
            </para>
            </remarks>
        </member>
        <member name="T:netDxf.Entities.OrdinateDimension">
            <summary>
            Represents an ordinate dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector3,netDxf.Vector2,System.Double,System.Double,netDxf.Entities.OrdinateDimensionAxis)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector3">point</see> of the ordinate dimension.</param>
            <param name="referencePoint">Base location <see cref="T:netDxf.Vector3">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="length">Length of the dimension line.</param>
            <param name="axis">Length of the dimension line.</param>
            <param name="rotation">Angle of rotation in degrees of the dimension lines.</param>
            <remarks>The local coordinate system of the dimension is defined by the dimension normal and the rotation value.</remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector3,netDxf.Vector2,System.Double,netDxf.Entities.OrdinateDimensionAxis,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector3">point</see> in world coordinates of the ordinate dimension.</param>
            <param name="referencePoint">Base location <see cref="T:netDxf.Vector3">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="length">Length of the dimension line.</param>
            <param name="axis">Local axis that measures the ordinate dimension.</param>
            <param name="rotation">Angle of rotation in degrees of the dimension lines.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The local coordinate system of the dimension is defined by the dimension normal and the rotation value.</remarks>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Origin">
            <summary>
            Gets or sets the origin <see cref="T:netDxf.Vector3">point</see> in world coordinates of the ordinate dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.ReferencePoint">
            <summary>
            Gets or sets the base location <see cref="T:netDxf.Vector3">point</see> in local coordinates of the ordinate dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Rotation">
            <summary>
            Gets or sets the angle of rotation in degrees of the ordinate dimension local coordinate system.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Length">
            <summary>
            Gets or sets the length of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Axis">
            <summary>
            Gest or sets the local axis that measures the ordinate dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Value">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="T:netDxf.Entities.OrdinateDimensionAxis">
            <summary>
            Defines the axis that measures the ordinate dimension.
            </summary>
        </member>
        <member name="F:netDxf.Entities.OrdinateDimensionAxis.X">
            <summary>
            The ordinate dimension measure the X distance and the dimension line is aligned to the Y axis.
            </summary>
        </member>
        <member name="F:netDxf.Entities.OrdinateDimensionAxis.Y">
            <summary>
            The ordinate dimension measure the Y distance and the dimension line is aligned to the X axis.
            </summary>
        </member>
        <member name="T:netDxf.Entities.RadialDimension">
            <summary>
            Represents a radial dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Arc,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Circle,System.Double)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Circle,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector3">point</see> of the circunference.</param>
            <param name="radius">Radius value.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Vector3,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector3">point</see> of the circunference.</param>
            <param name="radius">Radius value.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.FormatDimensionText(System.Double)">
            <summary>
            Format the value for the dimension text.
            </summary>
            <param name="dimValue">Dimension value.</param>
            <returns>The formated text.</returns>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.BuildBlock(System.String)">
            <summary>
            Gets the the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be asigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="P:netDxf.Entities.RadialDimension.CircunferencePoint">
            <summary>
            Definition point for diameter, radius, and angular dimensions (in WCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.RadialDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector3">point</see> of the circunference.
            </summary>
        </member>
        <member name="P:netDxf.Entities.RadialDimension.Radius">
            <summary>
            Gets or sets the radius of the circunference.
            </summary>
        </member>
        <member name="P:netDxf.Entities.RadialDimension.Rotation">
            <summary>
            Gets or sets the rotation of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.RadialDimension.Value">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="T:netDxf.Entities.DimensionType">
            <summary>
            Dimension type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Linear">
            <summary>
            Rotated, horizontal, or vertical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Aligned">
            <summary>
            Aligned.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Angular">
            <summary>
            Angular 2 lines.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Diameter">
            <summary>
            Diameter.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Angular3Point">
            <summary>
            Angular 3 points.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Ordinate">
            <summary>
            Ordinate.
            </summary>
        </member>
        <member name="T:netDxf.Entities.DimensionTypeFlag">
            <summary>
            Dimension type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlag.Linear">
            <summary>
            Rotated, horizontal, or vertical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlag.Aligned">
            <summary>
            Aligned.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlag.Angular">
            <summary>
            Angular 2 lines.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlag.Diameter">
            <summary>
            Diameter.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlag.Radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlag.Angular3Point">
            <summary>
            Angular 3 points.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlag.Ordinate">
            <summary>
            Ordinate.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlag.BlockReference">
            <summary>
            Indicates that the block reference (group code 2) is referenced by this dimension only.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlag.OrdinteType">
            <summary>
            Ordinate type. This is a bit value (bit 7) used only with integer value 6. If set, ordinate is X-type; if not set, ordinate is Y-type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlag.UserTextPosition">
            <summary>
            This is a bit value (bit 8) added to the other group 70 values if the dimension text has been positioned at a user-defined location rather than at the default location.
            </summary>
        </member>
        <member name="T:netDxf.Entities.LinearDimension">
            <summary>
            Represents a linear or rotated dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference line define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Vector3,netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector3">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector3">point</see> of the dimension.</param>
            <param name="offset">Distance between the mid point reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Vector3,netDxf.Vector3,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector3">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector3">point</see> of the dimension.</param>
            <param name="offset">Distance between the mid point reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.BuildBlock(System.String)">
            <summary>
            Gets the the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be asigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.FirstReferencePoint">
            <summary>
            Gets or sets the first definition point of the dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.SecondReferencePoint">
            <summary>
            Gets or sets the second definition point of the dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Offset">
            <summary>
            Gets or sets the distance between the mid point of the reference line and the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Rotation">
            <summary>
            Gets or sets the rotation of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Value">
            <summary>
            Gets the actual measurement.
            </summary>
        </member>
        <member name="T:netDxf.Entities.PolylineSmoothType">
            <summary>
            Defines the curves type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.NoSmooth">
            <summary>
            No smooth curve.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.Quadratic">
            <summary>
            Quadratic B-spline curve.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.Cubic">
            <summary>
            Cubic B-spline curve.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MTextAttachmentPoint">
            <summary>
            Defines the multiline text attachment point.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.TopLeft">
            <summary>
            Top left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.TopCenter">
            <summary>
            Top center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.TopRight">
            <summary>
            Top right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.MiddleLeft">
            <summary>
            Middle left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.MiddleCenter">
            <summary>
            Middle center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.MiddleRight">
            <summary>
            Middle right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.BottomLeft">
            <summary>
            Bottom left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.BottomCenter">
            <summary>
            Bottom center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.BottomRight">
            <summary>
            Bottom right.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MText">
            <summary>
            Represents a multiline text <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector3,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector2,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector2,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector3,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.MText.Write(System.String,netDxf.Entities.MTextFormattingOptions)">
            <summary>
            Adds the text to the existing paragraph. 
            </summary>
            <param name="text">Text string.</param>
            <param name="options">Text formatting options.</param>
        </member>
        <member name="M:netDxf.Entities.MText.EndParagraph">
            <summary>
            Ends the actual paragraph (adds the end paragraph code and the paragraph height factor). 
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Rotation">
            <summary>
            Gets or sets the text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Height">
            <summary>
            Gets or sets the text height.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.LineSpacingFactor">
            <summary>
            Gets or sets the line spacing factor.
            </summary>
            <remarks>
            Percentage of default line spacing to be applied. Valid values range from 0.25 to 4.00, the default value 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MText.ParagraphHeightFactor">
            <summary>
            Gets or sets the paragraph height factor.
            </summary>
            <remarks>
            Percentage of default paragraph height factor to be applied. Valid values range from 0.25 to 4.00, the default value 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MText.LineSpacingStyle">
            <summary>
            Get or sets the <see cref="T:netDxf.Entities.MTextLineSpacingStyle">line spacing style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.RectangleWidth">
            <summary>
            Gets or sets the text reference rectangle width.
            </summary>
            <remarks>
            This value defines the width of the box where the text will fit.
            If a paragraph width is longer than the rectangle width it will be broken in several lines, using the word spaces as breaking points.
             </remarks>
        </member>
        <member name="P:netDxf.Entities.MText.AttachmentPoint">
            <summary>
            Gets or sets the text <see cref="T:netDxf.Entities.MTextAttachmentPoint">attachment point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Style">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.TextStyle">text style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Position">
            <summary>
            Gets or sets the Text <see cref="T:netDxf.Vector2">position</see> in world coordinates..
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Value">
            <summary>
            Gets the text string.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MText.SpecialCharacters">
            <summary>
            Text strings to define special characters..
            </summary>
        </member>
        <member name="F:netDxf.Entities.MText.SpecialCharacters.NonbreakingSpace">
            <summary>
            Inserts a nonbreaking space
            </summary>
        </member>
        <member name="F:netDxf.Entities.MText.SpecialCharacters.Backslash">
            <summary>
            Inserts a backslash
            </summary>
        </member>
        <member name="F:netDxf.Entities.MText.SpecialCharacters.OpeningBrace">
            <summary>
            Opening brace
            </summary>
        </member>
        <member name="F:netDxf.Entities.MText.SpecialCharacters.ClosingBrace">
            <summary>
            Closing brace
            </summary>
        </member>
        <member name="T:netDxf.Entities.Hatch">
            <summary>
            Represents a hatch <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Hatch.#ctor(netDxf.Entities.HatchPattern,System.Collections.Generic.List{netDxf.Entities.HatchBoundaryPath})">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <remarks>
            The hatch boundary paths must be on the same plane as the hatch.
            The normal and the elevation of the boundary paths will be omited (the hatch elevation and normal will be used instead).
            Only the x and y coordinates for the center of the line, ellipse, circle and arc will be used.
            </remarks>
            <param name="pattern"><see cref="T:netDxf.Entities.HatchPattern">Hatch pattern</see>.</param>
            <param name="boundaryPaths">A list of <see cref="T:netDxf.Entities.HatchBoundaryPath">boundary paths</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Hatch.Pattern">
            <summary>
            Gets or sets the hatch pattern name.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.BoundaryPaths">
            <summary>
            Gets or sets the hatch boundary paths.
            </summary>
            <remarks>
            If the hatch is associative the boundary paths will be also added to the document.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Hatch.Elevation">
            <summary>
            Gets or sets the hatch elevation.
            </summary>
        </member>
        <member name="T:netDxf.Entities.PredefinedHatchPatternName">
            <summary>
            Predefined hatch pattern name.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PredefinedHatchPatternName.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PredefinedHatchPatternName.Line">
            <summary>
            Line.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PredefinedHatchPatternName.Net">
            <summary>
            Net.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PredefinedHatchPatternName.Dots">
            <summary>
            Dots.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchStyle">
            <summary>
            Hatch pattern style.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Normal">
            <summary>
            Hatch “odd parity” area.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Outer">
            <summary>
            Hatch outermost area only.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Ignore">
            <summary>
            Hatch through entire area.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchType">
            <summary>
            Hatch pattern type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.UserDefined">
            <summary>
            User defined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.Predefined">
            <summary>
            Predefined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="T:netDxf.Entities.FillType">
            <summary>
            Hatch pattern fill type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.FillType.PatternFill">
            <summary>
            Pattern fill.
            </summary>
        </member>
        <member name="F:netDxf.Entities.FillType.SolidFill">
            <summary>
            Solid fill.
            </summary>
        </member>
        <member name="T:netDxf.Entities.BoundaryPathTypeFlag">
            <summary>
            Defines the boundary path type of the hatch.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.BoundaryPathTypeFlag.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:netDxf.Entities.BoundaryPathTypeFlag.External">
            <summary>
            External.
            </summary>
        </member>
        <member name="F:netDxf.Entities.BoundaryPathTypeFlag.Polyline">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.BoundaryPathTypeFlag.Derived">
            <summary>
            Derived.
            </summary>
        </member>
        <member name="F:netDxf.Entities.BoundaryPathTypeFlag.Textbox">
            <summary>
            Textbox.
            </summary>
        </member>
        <member name="F:netDxf.Entities.BoundaryPathTypeFlag.Outermost">
            <summary>
            Outermost.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath">
            <summary>
            Represent a loop of a <see cref="T:netDxf.Entities.Hatch">hatch</see> boundaries.
            </summary>
            <remarks>
            The first loop will be considered as the Outermost path.<br/>
            The entities that make a loop can be any combination of lines, polylines, circles, arcs, ellipses, and splines.<br/>
            The entities that define a loop must define a closed path and they have to be on the same plane as the hatch, 
            if these conditions are not met the result will be unpredictable.<br/>
            The normal and the elevation will be omited (the hatch elevation and normal will be used instead).
            Only the x and y coordinates of the line, ellipse, the circle, and spline will be used.
            Circles, full ellipses, closed polylines, closed splines are closed paths so only one should exist in the data list.
            Lines, arcs, ellipse arcs, open polylines, and open splines are open paths so more enties should exist to make a closed loop.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.#ctor(System.Collections.Generic.List{netDxf.Entities.EntityObject})">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <param name="data">List of entities that makes a loop for the hatch boundary paths.</param>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.Data">
            <summary>
            Gets the list of entities that makes a loop for the hatch boundary paths.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.PathTypeFlag">
            <summary>
            Gets the boundary path type flag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.NumberOfEdges">
            <summary>
            Gets the number of edges that make up the boundary path.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchPatternLineDefinition">
            <summary>
            Defines a single line thats is part of a <see cref="T:netDxf.Entities.HatchPattern">hatch pattern</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPatternLineDefinition.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchPatternLineDefinition</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Angle">
            <summary>
            Gets or sets the angle of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Origin">
            <summary>
            Gets or sets the origin of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Delta">
            <summary>
            Gets or sets the local displacements between lines of the same family.
            </summary>
            <remarks>
            The Delta.X value indicates the displacement between members of the family in the direction of the line. It is used only for dashed lines.
            The Delta.Y value indicates the spacing between members of the family; that is, it is measured perpendicular to the lines. 
            </remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.DashPattern">
            <summary>
            Gets or sets the dash patter of the line it is equivalent as the segments of a <see cref="T:netDxf.Tables.LineType">LineType</see>.
            </summary>
            <remarks>
            Positive values means solid segments and negative values means spaces (one entry per element).
            </remarks>
        </member>
        <member name="T:netDxf.Entities.LwPolyline">
            <summary>
            Represents a light weight polyline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            Light weight polylines are bidimensional polylines that can hold information about the width of the lines and arcs that compose them.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.#ctor">
            <summary>
            Initializes a new instance of the <c>LwPolyline</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.#ctor(System.Collections.Generic.List{netDxf.Entities.LwPolylineVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>LwPolyline</c> class.
            </summary>
            <param name="vertexes">LwPolyline <see cref="T:netDxf.Entities.LwPolylineVertex">vertex</see> list in object coordinates.</param>
            <param name="isClosed">Sets if the polyline is closed.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.SetConstantWidth(System.Double)">
            <summary>
            Sets a constant width for all the polyline segments.
            </summary>
            <param name="width">Polyline width.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.Explode">
            <summary>
            Decompose the actual polyline in its internal entities, <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see>.
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see> that made up the polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.PoligonalVertexes(System.Int32,System.Double,System.Double)">
            <summary>
            Obtains a list of vertexes that represent the polyline approximating the curve segments as necessary.
            </summary>
            <param name="bulgePrecision">Curve segments precision (a value of zero means that no approximation will be made).</param>
            <param name="weldThreshold">Tolerance to consider if two new generated vertexes are equal.</param>
            <param name="bulgeThreshold">Minimun distance from which approximate curved segments of the polyline.</param>
            <returns>A list of vertexes expresed in object coordinate system.</returns>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Vertexes">
            <summary>
            Gets or sets the light weight polyline <see cref="T:netDxf.Entities.LwPolylineVertex">vertex</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.IsClosed">
            <summary>
            Gets or sets if the light weight polyline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Thickness">
            <summary>
            Gets or sets the light weight polyline thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Elevation">
            <summary>
            Gets or sets the light weight polyline elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Flags">
            <summary>
            Gets the light weight polyline type.
            </summary>
        </member>
        <member name="T:netDxf.Entities.LwPolylineVertex">
            <summary>
            Represents a <see cref="T:netDxf.Entities.LwPolyline">LwPolyline</see> vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>LwPolylineVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LwPolylineVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="bulge">Vertex bulge.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>LwPolylineVertex</c> class.
            </summary>
            <param name="location">Lightweight polyline <see cref="T:netDxf.Vector2">vertex</see> coordinates.</param>
            <param name="bulge">Vertex bulge.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.Location">
            <summary>
            Gets or sets the light weight polyline vertex <see cref="T:netDxf.Vector2">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.BeginWidth">
            <summary>
            Gets or sets the light weight polyline begin width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.EndWidth">
            <summary>
            Gets or sets the light weight polyline end width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.Bulge">
            <summary>
            Gets or set the light weight polyline bulge.
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the included angle for an arc segment, 
            made negative if the arc goes clockwise from the start point to the endpoint. 
            A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.MTextFormattingOptions">
            <summary>
            Options for the <see cref="T:netDxf.Entities.MText">multiline text</see> entity text formatting.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MTextFormattingOptions.#ctor(netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MTextFormattingOptions</c> class
            </summary>
            <param name="style">Current style of the <see cref="T:netDxf.Entities.MText">multiline text</see> entity.</param>
        </member>
        <member name="M:netDxf.Entities.MTextFormattingOptions.FormatText(System.String)">
            <summary>
            Obtains the string that represents the formatted text appling the current options.
            </summary>
            <param name="text">Text to be formatted.</param>
            <returns>The formatted text string.</returns>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Bold">
            <summary>
            Gets or sets if the text is bold.
            </summary>
            <remarks>The style font must support bold characters.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Italic">
            <summary>
            Gets or sets if the text is italic.
            </summary>
            <remarks>The style font must support italic characters.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Overline">
            <summary>
            Gets or sets the overline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Underline">
            <summary>
            Gets or sets underline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Color">
            <summary>
            Gets or sets the text color.
            </summary>
            <remarks>Set as null to apply the default color.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.FontName">
            <summary>
            Gets or sets the font file name (.ttf fonts without the extension).
            </summary>
            <remarks>Set as null to apply the default font.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Aligment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.HeightFactor">
            <summary>
            Gets or sets the text height as a multiple of the current text height.
            </summary>
            <remarks>Set as 1.0 to apply the default height factor.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.ObliqueAngle">
            <summary>
            Gets or sets the obliquing angle.
            </summary>
            <remarks>Set as 0.0 to apply the default obliquing angle.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.CharacterSpaceFactor">
            <summary>
             Gets or sets the space between characters as a multiple of the original spacing between characters.
            </summary>
            <remarks>
            Valid values range from a minimum of .75 to 4 times the original spacing between characters.
            Set as 1.0 to apply the default character space factor.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.WidthFactor">
            <summary>
            Gets or sets the width factor to produce wide text.
            </summary>
            <remarks>Set as 1.0 to apply the default width factor.</remarks>
        </member>
        <member name="T:netDxf.Entities.MTextFormattingOptions.TextAligment">
            <summary>
            Text alligment options.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextFormattingOptions.TextAligment.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextFormattingOptions.TextAligment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextFormattingOptions.TextAligment.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextFormattingOptions.TextAligment.Default">
            <summary>
            Current value (no changes).
            </summary>
        </member>
        <member name="T:netDxf.Entities.PolylineTypeFlags">
            <summary>
            Defines the polyline type.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.OpenPolyline">
            <summary>
            Default, open polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ClosedPolylineOrClosedPolygonMeshInM">
            <summary>
            This is a closed polyline (or a polygon mesh closed in the M direction).
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.CurveFit">
            <summary>
            Curve-fit vertices have been added.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.SplineFit">
            <summary>
            Spline-fit vertices have been added.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.Polyline3D">
            <summary>
            This is a 3D polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.PolygonMesh">
            <summary>
            This is a 3D polygon mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ClosedPolygonMeshInN">
            <summary>
            The polygon mesh is closed in the N direction.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.PolyfaceMesh">
            <summary>
            The polyline is a polyface mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ContinuousLineTypePatter">
            <summary>
            The linetype pattern is generated continuously around the vertices of this polyline.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Spline">
            <summary>
            Represents a spline curve <see cref="T:netDxf.Entities.EntityObject">entity</see> (NURBS Non-Uniform Rational B-Splines).
            </summary>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.List{netDxf.Entities.SplineVertex},System.Double[],System.Int16)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="knots">Spline knot vector.</param>
            <param name="degree">Degree of the spline curve.</param>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.List{netDxf.Entities.SplineVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="periodic">Sets if the spline as periodic closed (default false).</param>
            <remarks>By default the degree of the spline is equal three.</remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.List{netDxf.Entities.SplineVertex},System.Int16,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="degree">Degree of the spline curve.</param>
            <param name="periodic">Sets if the spline as periodic closed (default false).</param>
        </member>
        <member name="M:netDxf.Entities.Spline.SetUniformWeights(System.Double)">
            <summary>
            Sets all control point weigths to the specified number.
            </summary>
            <param name="weight">Control point weight.</param>
        </member>
        <member name="P:netDxf.Entities.Spline.ControlPoints">
            <summary>
            Gets the spline <see cref="T:netDxf.Entities.SplineVertex">control points</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.Degree">
            <summary>
            Gets the spline degree.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.IsClosed">
            <summary>
            Gets if the spline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.IsPeriodic">
            <summary>
            Gets if the spline is periodic.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.Knots">
            <summary>
            Gets the spline knot vector.
            </summary>
            <remarks>By default a uniform knot vector is created.</remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.Flags">
            <summary>
            Gets the spline type.
            </summary>
        </member>
        <member name="T:netDxf.Entities.SplineTypeFlags">
            <summary>
            Defines the spline type.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.None">
            <summary>
            Default (open 3d spline).
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Closed">
            <summary>
            Closed spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Periodic">
            <summary>
            Periodic spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Rational">
            <summary>
            Rational spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Planar">
            <summary>
            Planar.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Linear">
            <summary>
            Linear (planar bit is also set).
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Unknown3">
            <summary>
            Used by splines created by fit points.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Unknown4">
            <summary>
            Used for closed periodic splines.
            </summary>
        </member>
        <member name="T:netDxf.Entities.SplineVertex">
            <summary>
            Represents a control point of a <see cref="T:netDxf.Entities.Spline">spline</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>SplineVertex</c> class.
            </summary>
            <param name="x">Control point x coordiante.</param>
            <param name="y">Control point y coordiante.</param>
            <param name="z">Control point z coordiante.</param>
            <param name="w">Control point weight (default 1.0).</param>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>SplineVertex</c> class.
            </summary>
            <param name="location">Spline control point <see cref="T:netDxf.Vector2">vertex</see> coordinates.</param>
            <param name="weigth">Weigth of the spline control point (default 1.0).</param>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.#ctor(netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>SplineVertex</c> class.
            </summary>
            <param name="location">Spline control point <see cref="T:netDxf.Vector3">vertex</see> coordinates.</param>
            <param name="weigth">Weigth of the spline control point (default 1.0).</param>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.ToString">
            <summary>
            Obtains a string that represents the spline vertex.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the spline vertex.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="P:netDxf.Entities.SplineVertex.Location">
            <summary>
            Get or sets the spline control point <see cref="T:netDxf.Vector3">vertex</see> coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.SplineVertex.Weigth">
            <summary>
            Gets or sets the weigth of the spline control point.
            </summary>
        </member>
        <member name="T:netDxf.Entities.VertexTypeFlags">
            <summary>
            Defines the vertex type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.PolylineVertex">
            <summary>
            2d polyline vertex.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.CurveFittingExtraVertex">
            <summary>
            Extra vertex created by curve-fitting.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.CurveFitTangent">
            <summary>
            Curve-fit tangent defined for this vertex.
            A curve-fit tangent direction of 0 may be omitted from DXF output but is significant if this bit is set.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.NotUsed">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.SplineVertexFromSplineFitting">
            <summary>
            Spline vertex created by spline-fitting.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.SplineFrameControlPoint">
            <summary>
            Spline frame control point.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.Polyline3dVertex">
            <summary>
            3D polyline vertex.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.Polygon3dMesh">
            <summary>
            3D polygon mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.PolyfaceMeshVertex">
            <summary>
            Polyface mesh vertex.
            </summary>
        </member>
        <member name="T:netDxf.Header.AttMode">
            <summary>
            Defines the attribute visibility.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.All">
            <summary>
            All.
            </summary>
        </member>
        <member name="T:netDxf.Header.HeaderVariables">
            <summary>
            Represents the header variables of a dxf document.
            </summary>
            <remarks>
            The names of header variables are the same as they appear in the official dxf documentation but without the $,
            check it in case of doubt on what they represent.
            </remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.#ctor">
            <summary>
            Initializes a new instance of the <c>SystemVariables</c>.
            </summary>
            <remarks>The default values are the same ones that are apply to a new AutoCad drawing.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AcadVer">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
            <remarks>Only AutoCad2000 and higher dxf versions are supported.</remarks>
            <exception cref="T:System.NotSupportedException">Only AutoCad2000 and higher dxf versions are supported.</exception>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.HandleSeed">
            <summary>
            Next available handle.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Angbase">
            <summary>
            Angle 0 direction.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Angdir">
            <summary>
            1 = Clockwise angles, 0 = Counterclockwise.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AttMode">
            <summary>
            Attribute visibility.
            </summary>
            <remarks>Default value: AttMode.Normal.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AUnits">
            <summary>
            Units format for angles.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AUprec">
            <summary>
            Units precision for angles.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeColor">
            <summary>
            Current entity color.
            </summary>
            <remarks>Default value: 256 (ByLayer). This header variable only supports indexed colors.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLtScale">
            <summary>
            Current entity linetype scale.
            </summary>
            <remarks>Default value: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLweight">
            <summary>
            Current entity lineweight.
            </summary>
            <remarks>Default value: -1 (ByLayer).</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLtype">
            <summary>
            Current entity linetype name.
            </summary>
            <remarks>Default value: ByLayer.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CLayer">
            <summary>
            Current layer name.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CMLJust">
            <summary>
            Current multiline justification.
            </summary>
            <remarks>Default value: 0 (Top).</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CMLScale">
            <summary>
            Current multiline scale.
            </summary>
            <remarks>Default value: 20.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CMLStyle">
            <summary>
            Current multiline style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.DimStyle">
            <summary>
            Current dimension style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TextSize">
            <summary>
            Default text height.
            </summary>
            <remarks>Default value: 2.5.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TextStyle">
            <summary>
            Current text style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LUnits">
            <summary>
            Units format for coordinates and distances.
            </summary>
            <remarks>Default value: 2.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LUprec">
            <summary>
            Units precision for coordinates and distances.
            </summary>
            <remarks>Default value: 4.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.DwgCodePage">
            <summary>
            Drawing code page; set to the system code page when a new drawing is created, but not otherwise maintained by AutoCAD.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Extnames">
            <summary>
            Controls symbol table naming.
            </summary>
            <remarks>
            Default value: 1.<br />
            Controls symbol table naming:<br />
            0 = Release 14 compatibility. Limits names to 31 characters in length.<br />
            Names can include the letters A to Z, the numerals 0 to 9,
            and the special characters dollar sign ($), underscore (_), and hyphen (-).<br />
            1 = AutoCAD 2000.<br />
            Names can be up to 255 characters in length, 
            and can include the letters A to Z, the numerals 0 to 9, spaces, 
            and any special characters not used for other purposes by Microsoft Windows and AutoCAD.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Insunits">
            <summary>
            Default drawing units for AutoCAD DesignCenter blocks.
            </summary>
            <remarks>
            Default value: 0.<br />
            Also applies to raster image units, eventhought they have the RasterVariables object and units in ImageDef.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LastSavedBy">
            <summary>
            User name that saved the file.
            </summary>
            <remarks>
            By default it uses the user name of the person who is currently logged on to the Windows operating system.<br />
            This header variable is not compatible with AutoCad2000 or lower versions.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LtScale">
            <summary>
            Global linetype scale.
            </summary>
            <remarks>Default value: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LwDisplay">
            <summary>
            Controls the display of lineweights on the Model or Layout tab.
            </summary>
            <remarks>
            Default value: false.<br />
            false = Lineweight is not displayed.<br />
            true = Lineweight is displayed.<br />
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PdMode">
            <summary>
            Controls the <see cref="T:netDxf.Header.PointShape">shape</see> to draw a point entity.
            </summary>
            <remarks>Default value: PointShape.Dot.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PdSize">
            <summary>
            Controls the size of the point figures, except for PDMODE values 0 (Dot) and 1 (Empty).
            </summary>
            <remarks>
            Default value: 0.<br />
            A setting of 0 generates the point at 5 percent of the drawing area height.<br />
            A positive PDSIZE value specifies an absolute size for the point figures.<br />
            A negative value is interpreted as a percentage of the viewport size. <br />
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PLineGen">
            <summary>
            Governs the generation of linetype patterns around the vertices of a 2D polyline.
            </summary>
            <remarks>
            Default value: 0.<br />
            1 = Linetype is generated in a continuous pattern around vertices of the polyline.<br />
            0 = Each segment of the polyline starts and ends with a dash.
            </remarks>
        </member>
        <member name="T:netDxf.Header.PointShape">
            <summary>
            Defines the shape of the point entities.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Dot">
            <summary>
            A dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Empty">
            <summary>
            No shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Plus">
            <summary>
            Plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Cross">
            <summary>
            Cross sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Line">
            <summary>
            A line going upwards.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleDot">
            <summary>
            A circle and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleEmpty">
            <summary>
            Only a circle shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CirclePlus">
            <summary>
            A circle and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleCross">
            <summary>
            A circle and a cros sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleLine">
            <summary>
            A circle and a line.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareDot">
            <summary>
            A square and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareEmpty">
            <summary>
            Only a square shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquarePlus">
            <summary>
            A square and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareCross">
            <summary>
            A square and a cros sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareLine">
            <summary>
            A square and a line.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareDot">
            <summary>
            A circle, a square, and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareEmpty">
            <summary>
            A circle and a square.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquarePlus">
            <summary>
            A circle, a square, and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareCross">
            <summary>
            A circle, a square, and a cros sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareLine">
            <summary>
            A circle, a square, and a line.
            </summary>
        </member>
        <member name="T:netDxf.Lineweight">
            <summary>
            Represents the lineweight of a layer or an entity.
            </summary>
        </member>
        <member name="M:netDxf.Lineweight.#ctor">
            <summary>
            Initializes a new instance of the <c>Lineweight</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Lineweight.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <c>Lineweight</c> class.
            </summary>
            <param name="weight">Lineweight value range from 0 to 200.</param>
            <remarks>
            Accepted lineweight values range from 0 to 200, the reserved values - 1, -2, and -3 represents ByLayer, ByBlock, and Default lineweights.
            </remarks>
        </member>
        <member name="M:netDxf.Lineweight.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Lineweight.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:netDxf.Lineweight.ByLayer">
            <summary>
            Gets the ByLayer lineweight.
            </summary>
        </member>
        <member name="P:netDxf.Lineweight.ByBlock">
            <summary>
            Gets the ByBlock lineweight.
            </summary>
        </member>
        <member name="P:netDxf.Lineweight.Default">
            <summary>
            Gets the Default lineweight.
            </summary>
        </member>
        <member name="P:netDxf.Lineweight.Value">
            <summary>
            Gets or sets the line weight value range from 0 to 200, one unit is always 1/100 mm.
            </summary>
            <remarks>
            Accepted lineweight values range from 0 to 200, the reserved values - 1, -2, and -3 represents ByLayer, ByBlock, and Default lineweights.
            </remarks>
        </member>
        <member name="T:netDxf.DrawingUnits">
            <summary>
            Default drawing units for AutoCAD DesignCenter blocks.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Unitless">
            <summary>
            Unitless.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Feet">
            <summary>
            Feet.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Miles">
            <summary>
            Miles.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Millimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Meters">
            <summary>
            Meters.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Kilometers">
            <summary>
            Kilometers.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Microinches">
            <summary>
            Microinches.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Mils">
            <summary>
            Mils (a thousandth of an inch).
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Yards">
            <summary>
            Yards.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Angstroms">
            <summary>
            Angstroms.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Nanometers">
            <summary>
            Nanometers.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Microns">
            <summary>
            Microns.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Decimeters">
            <summary>
            Decimeters.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Decameters">
            <summary>
            Decameters
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Hectometers">
            <summary>
            Hectometers.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Gigameters">
            <summary>
            Gigameters.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.AstronomicalUnits">
            <summary>
            AstronomicalUnits.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.LightYears">
            <summary>
            LightYears.
            </summary>
        </member>
        <member name="F:netDxf.DrawingUnits.Parsecs">
            <summary>
            Parsecs.
            </summary>
        </member>
        <member name="T:netDxf.Header.DxfVersion">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.Unknown">
            <summary>
            Unknown AutoCAD DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad10">
            <summary>
            AutoCAD R10 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad12">
            <summary>
            AutoCAD R11 and R12 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad13">
            <summary>
            AutoCAD R13 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad14">
            <summary>
            AutoCAD R14 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2000">
            <summary>
            AutoCAD 2000 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2004">
            <summary>
            AutoCAD 2004 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2007">
            <summary>
            AutoCAD 2007 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2010">
            <summary>
            AutoCAD 2010 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2013">
            <summary>
            AutoCAD 2013 DXF file.
            </summary>
        </member>
        <member name="T:netDxf.Header.HeaderVariableCode">
            <summary>
            Strings system variables
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AcadVer">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.HandleSeed">
            <summary>
            Next available handle.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Angbase">
            <summary>
            Angle 0 direction.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Angdir">
            <summary>
            1 = Clockwise angles, 0 = Counterclockwise.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AttMode">
            <summary>
            Attribute visibility.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AUnits">
            <summary>
            Units format for angles.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AUprec">
            <summary>
            Units precision for angles.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeColor">
            <summary>
            Current entity color.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLtScale">
            <summary>
            Current entity linetype scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLweight">
            <summary>
            Current entity lineweight.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLtype">
            <summary>
            Current entity linetype name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CLayer">
            <summary>
            Current layer name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CMLJust">
            <summary>
            Current multiline justification.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CMLScale">
            <summary>
            Current multiline scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CMLStyle">
            <summary>
            Current multiline style name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.DimStyle">
            <summary>
            Current dimension style name
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TextSize">
            <summary>
            Default text height.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TextStyle">
            <summary>
            Current text style name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LUnits">
            <summary>
            Units format for coordinates and distances.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LUprec">
            <summary>
            Units precision for coordinates and distances.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.DwgCodePage">
            <summary>
            Drawing code page; set to the system code page when a new drawing is created, but not otherwise maintained by AutoCAD.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Extnames">
            <summary>
            Controls symbol table naming.
            </summary>
            <remarks>
            Controls symbol table naming:<br />
            0 = Release 14 compatibility. Limits names to 31 characters in length.<br />
            Names can include the letters A to Z, the numerals 0 to 9,
            and the special characters dollar sign ($), underscore (_), and hyphen (-).<br />
            1 = AutoCAD 2000.<br />
            Names can be up to 255 characters in length, 
            and can include the letters A to Z, the numerals 0 to 9, spaces, 
            and any special characters not used for other purposes by Microsoft Windows and AutoCAD.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Insunits">
            <summary>
            Default drawing units for AutoCAD DesignCenter blocks.
            </summary>
            <remarks>
            Also applies to raster image units, eventhought they have the RasterVariables object and units in ImageDef.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LastSavedBy">
            <summary>
            User name that saved the file.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LwDisplay">
            <summary>
            Controls the display of lineweights on the Model or Layout tab.
            </summary>
            <remarks>
            0 = Lineweight is not displayed
            1 = Lineweight is displayed
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LtScale">
            <summary>
            Global linetype scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PdMode">
            <summary>
            Controls the <see cref="T:netDxf.Header.PointShape">shape</see> to draw a point entity.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PdSize">
            <summary>
            Controls the size of the point figures, except for PDMODE values 0 (Dot) and 1 (Empty).
            </summary>
            <remarks>
            A setting of 0 generates the point at 5 percent of the drawing area height.<br />
            A positive PDSIZE value specifies an absolute size for the point figures.<br />
            A negative value is interpreted as a percentage of the viewport size.<br />
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PLineGen">
            <summary>
            Governs the generation of linetype patterns around the vertices of a 2D polyline.
            </summary>
            <remarks>
            1 = Linetype is generated in a continuous pattern around vertices of the polyline.<br />
            0 = Each segment of the polyline starts and ends with a dash.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.MTextLineSpacingStyle">
            <summary>
            MText line spacing style.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextLineSpacingStyle.AtLeast">
            <summary>
            At least (taller characters will override)
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextLineSpacingStyle.Exact">
            <summary>
            Exact (taller characters will not override)
            </summary>
        </member>
        <member name="T:netDxf.Objects.ClonningFlag">
            <summary>
            Duplicate record cloning flag (determines how to merge duplicate entries).
            </summary>
        </member>
        <member name="P:netDxf.Objects.DictionaryObject.Entries">
            <summary>
            Gets the entries dictionary (key: owner entry handle, value: name)
            </summary>
        </member>
        <member name="T:netDxf.Objects.Group">
            <summary>
            Represents a group of entities.
            </summary>
        </member>
        <member name="M:netDxf.Objects.Group.#ctor(System.String)">
            <summary>
            Initialized a new empty group.
            </summary>
            <param name="name">Group name (optional).</param>
            <remarks>
            If the name is set to null or empty, a unique name will be generated when it is added to the document.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.Group.Name">
            <summary>
            Gets the name of the group.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.Description">
            <summary>
            Gets or sets the description of the group.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.IsUnnamed">
            <summary>
            Get if the group has an automatic generated name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.IsSelectable">
            <summary>
            Gets or sets if the group is selectable.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.Entities">
            <summary>
            Gets or sets the list of entities contained in the group.
            </summary>
            <remarks>
            When the group is added to the document the entities in it will be automatically added too.<br/>
            An entity may be contained in different groups.<br/>
            If the entities list is modified after it has been added to the document the entities will have to be added manually.
            </remarks>
        </member>
        <member name="T:netDxf.Objects.ResolutionUnits">
            <summary>
            Defines the image resolution units.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ResolutionUnits.NoUnits">
            <summary>
            No units.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ResolutionUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ResolutionUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="T:netDxf.Objects.SupportedImageFormats">
            <summary>
            Supported image formats.
            </summary>
            <remarks>
            These are the image formats in common between the net framework and AutoCAD
            </remarks>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Bmp">
            <summary>
            Bmp image format.
            </summary>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Jpeg">
            <summary>
            Jpg image format.
            </summary>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Png">
            <summary>
            Png image format.
            </summary>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Tiff">
            <summary>
            Tiff image format.
            </summary>
        </member>
        <member name="T:netDxf.Objects.ImageDef">
            <summary>
            Represents a image definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.ImageDef.#ctor(System.String,System.Int32,System.Single,System.Int32,System.Single,netDxf.Objects.ResolutionUnits)">
            <summary>
            Initializes a new instance of the <c>ImageDef</c> class.
            </summary>
            <param name="fileName">Image file name with full or relative path.</param>
            <param name="width">Image width in pixels.</param>
            <param name="horizontalResolution">Image horizontal resolution in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="verticalResolution">Image vetical resolution in pixels.</param>
            <param name="units">Image resolution units.</param>
            <remarks>
            <para>
            The name of the file without extension will be used as the name of the image definition.
            </para>
            <para>
            This is a generic constructor for all image formats supported by AutoCAD, note that not all AutoCAD versions support the same image formats.
            </para>
            <para>
            Note (this is from the ACAD docs): AutoCAD 2000, AutoCAD LT 2000, and later releases do not support LZW-compressed TIFF files,
            with the exception of English language versions sold in the US and Canada.<br />
            If you have TIFF files that were created using LZW compression and want to insert them into a drawing 
            you must resave the TIFF files with LZW compression disabled.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Objects.ImageDef.#ctor(System.String,System.Int32,System.Single,System.Int32,System.Single,System.String,netDxf.Objects.ResolutionUnits)">
            <summary>
            Initializes a new instance of the <c>ImageDef</c> class.
            </summary>
            <param name="fileName">Image file name with full or relative path.</param>
            <param name="width">Image width in pixels.</param>
            <param name="horizontalResolution">Image horizontal resolution in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="verticalResolution">Image vertical resolution in pixels.</param>
            <param name="name">Image definition name, if null or empty the file name without the extension will be used.</param>
            <param name="units">Image resolution units.</param>
            <remarks>
            <para>
            The name assigned to the image definition must be unique.
            </para>
            <para>
            This is a generic constructor for all image formats supported by AutoCAD, note that not all AutoCAD versions support the same image formats.
            </para>
            <para>
            Note (this is from the ACAD docs): AutoCAD 2000, AutoCAD LT 2000, and later releases do not support LZW-compressed TIFF files,
            with the exception of English language versions sold in the US and Canada.<br />
            If you have TIFF files that were created using LZW compression and want to insert them into a drawing 
            you must resave the TIFF files with LZW compression disabled.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Objects.ImageDef.#ctor(System.String,netDxf.Objects.ResolutionUnits)">
             <summary>
             Initializes a new instance of the <c>ImageDef</c> class.
             </summary>
             <param name="fileName">Image file name with full or relative path.</param>
            <param name="units">Image resolution units, by defult centimeters will be used.</param>
            <remarks>
             <para>
             The name of the file without extension will be used as the name of the image definition.
             </para>
             <para>
             Supported image formats: BMP, JPG, PNG, TIFF.<br />
             Eventhought AutoCAD supports more image formats, this constructor is restricted to the ones the net framework supports in common with AutoCAD.
             Use the generic constructor instead.
             </para>
             <para>
             Note (this is from the ACAD docs): AutoCAD 2000, AutoCAD LT 2000, and later releases do not support LZW-compressed TIFF files,
             with the exception of English language versions sold in the US and Canada.<br />
             If you have TIFF files that were created using LZW compression and want to insert them into a drawing 
             you must resave the TIFF files with LZW compression disabled.
             </para>
            </remarks>
        </member>
        <member name="M:netDxf.Objects.ImageDef.#ctor(System.String,System.String,netDxf.Objects.ResolutionUnits)">
             <summary>
             Initializes a new instance of the <c>ImageDef</c> class.
             </summary>
             <param name="fileName">Image file name with full or relative path.</param>
             <param name="name">Image definition name, if null or empty the file name without the extension will be used.</param>
            <param name="units">Image resolution units, by defult centimeters will be used.</param>
            <remarks>
             <para>
             The name assigned to the image definition must be unique.
             </para>
             <para>
             Supported image formats: BMP, JPG, PNG, TIFF.<br />
             Eventhought AutoCAD supports more image formats, this constructor is restricted to the ones the .net library supports in common with AutoCAD.
             Use the generic constructor instead.
             </para>
             <para>
             Note (this is from the ACAD docs): AutoCAD 2000, AutoCAD LT 2000, and later releases do not support LZW-compressed TIFF files,
             with the exception of English language versions sold in the US and Canada.<br />
             If you have TIFF files that were created using LZW compression and want to insert them into a drawing 
             you must resave the TIFF files with LZW compression disabled.
             </para>
            </remarks>
        </member>
        <member name="P:netDxf.Objects.ImageDef.FileName">
            <summary>
            Gets the image path.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDef.Name">
            <summary>
            Gets the image definition name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDef.Width">
            <summary>
            Gets the image width in pixels.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDef.Height">
            <summary>
            Gets the image height in pixels.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDef.ResolutionUnits">
            <summary>
            Gets the image resolution units used to calculate the one pixel size value.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDef.OnePixelSize">
            <summary>
            Gets the default size of one pixel in AutoCAD units.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDef.HorizontalResolution">
            <summary>
            Gets the image horizontal resolution in pixels per unit.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDef.VerticalResolution">
            <summary>
            Gets the image vertical resolution in pixels per unit.
            </summary>
        </member>
        <member name="T:netDxf.Objects.MLineStyleFlags">
            <summary>
            Flags (bit-coded).
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.FillOn">
            <summary>
            Fill on.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.DisplayMiters">
            <summary>
            Display miters.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.StartSquareEndCap">
            <summary>
            Start square end (line) cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.StartInnerArcsCap">
            <summary>
            Start inner arcs cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.StartRoundCap">
            <summary>
            Start round (outer arcs) cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.EndSquareCap">
            <summary>
            End square (line) cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.EndInnerArcsCap">
            <summary>
            End inner arcs cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.EndRoundCap">
            <summary>
            End round (outer arcs) cap.
            </summary>
        </member>
        <member name="T:netDxf.Objects.MLineStyle">
            <summary>
            Represents as MLine style.
            </summary>
        </member>
        <member name="T:netDxf.Tables.TableObject">
            <summary>
            Defines classes that can be accesed by name. They are usually part of the dxf table section but can also be part of the objects section.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TableObject.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>TableObject</c> class.
            </summary>
            <param name="name">Table name.</param>
            <param name="codeName">Table <see cref="T:netDxf.DxfObjectCode">code name</see>.</param>
            <remarks>Do not give names starting with * to table objects, they are reserved for internal use.</remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:netDxf.Tables.TableObject.Name">
            <summary>
            Gets the name of the table object.
            </summary>
            <remarks>Table object names are case unsensitive.</remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>MLineStyle</c> class.
            </summary>
            <param name="name">MLine style name.</param>
            <param name="description">MLine style description (optional).</param>
            <remarks>By default the multiline style has to elements with offsets 0.5 y -0.5.</remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.#ctor(System.String,System.Collections.Generic.List{netDxf.Objects.MLineStyleElement},System.String)">
            <summary>
            Initializes a new instance of the <c>MLineStyle</c> class.
            </summary>
            <param name="name">MLine style name.</param>
            <param name="elements">Elements of the multiline.</param>
            <param name="description">MLine style description (optional).</param>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Default">
            <summary>
            Gets the default MLine style.
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Flags">
            <summary>
            Gets or sets the MLine style flags.
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Description">
            <summary>
            Gets or sets the line type description (optional).
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.FillColor">
            <summary>
            Gets or sets the MLine fill color.
            </summary>
            <remarks>
            AutoCad2000 dxf version does not support true colors for MLineStyle fill color.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.StartAngle">
            <summary>
            Gets or sets the MLine start angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.EndAngle">
            <summary>
            Gets or sets the MLine end angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Elements">
            <summary>
            Gets or sets the list of elements that make up the multiline.
            </summary>
            <remarks>
            The elements list must be ordered, this will be done automatically,
            but if new elements are added individually to the list it will have to be sorted manually calling the Sort() method.</remarks>
        </member>
        <member name="T:netDxf.Objects.ImageDisplayQuality">
            <summary>
            Image display quality (screen only).
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageDisplayQuality.Draft">
            <summary>
            Draft quality.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageDisplayQuality.High">
            <summary>
            High quality.
            </summary>
        </member>
        <member name="T:netDxf.Objects.ImageUnits">
            <summary>
            AutoCAD units for inserting images.
            This is what one AutoCAD unit is equal to for the purpose of inserting and scaling images with an associated resolution.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageUnits.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageUnits.Millimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageUnits.Meters">
            <summary>
            Meters.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageUnits.Kilometers">
            <summary>
            Kilometers.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageUnits.Feet">
            <summary>
            Feet.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageUnits.Yards">
            <summary>
            Yards.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageUnits.Miles">
            <summary>
            Miles.
            </summary>
        </member>
        <member name="T:netDxf.Objects.RasterVariables">
            <summary>
            Represents the variables applied to bitmaps.
            </summary>
        </member>
        <member name="M:netDxf.Objects.RasterVariables.#ctor">
            <summary>
            Initializes a new instance of the <c>RasterVariables</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Objects.RasterVariables.DisplayFrame">
            <summary>
            Gets or sets if the image frame is shown.
            </summary>
        </member>
        <member name="P:netDxf.Objects.RasterVariables.DisplayQuality">
            <summary>
            Gets or sets the image display quality (screen only).
            </summary>
        </member>
        <member name="P:netDxf.Objects.RasterVariables.Units">
            <summary>
            Gets or sets the AutoCAD units for inserting images.
            </summary>
            <remarks>
            This is what one AutoCAD unit is equal to for the purpose of inserting and scaling images with an associated resolution.
            It is recommended to use the same units as the header variable $INSUNITS.
            </remarks>
        </member>
        <member name="T:netDxf.Objects.MLineStyleElement">
            <summary>
            Represent each of the elements that make up a MLineStyle.
            </summary>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <c>MLineStyleElement</c> class.
            </summary>
            <param name="offset">Element offset.</param>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.#ctor(System.Double,netDxf.AciColor,netDxf.Tables.LineType)">
            <summary>
            Initializes a new instance of the <c>MLineStyleElement</c> class.
            </summary>
            <param name="offset">Element offset.</param>
            <param name="color">Element color.</param>
            <param name="lineType">Element line type.</param>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.CompareTo(netDxf.Objects.MLineStyleElement)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:netDxf.Objects.MLineStyleElement.Offset">
            <summary>
            Gets or sets the element offset.
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyleElement.Color">
            <summary>
            Gets or sets the element color.
            </summary>
            <remarks>
            AutoCad2000 dxf version does not support true colors for MLineStyleElement color.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyleElement.LineType">
            <summary>
            Gets or sets the element line type.
            </summary>
        </member>
        <member name="T:netDxf.Vector2">
            <summary>
            Represent a two component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector2.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
        </member>
        <member name="M:netDxf.Vector2.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of Vector2.
            </summary>
            <param name="array">Array of two elements that represents the vector.</param>
        </member>
        <member name="M:netDxf.Vector2.DotProduct(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector2.CrossProduct(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the cross product of two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.Perpendicular(netDxf.Vector2)">
            <summary>
            Obtains the counter clockwise perpendicular vector .
            </summary>
            <param name="u">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.Polar(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Obtains a the polar point of another point. 
            </summary>
            <param name="u">Reference point.</param>
            <param name="distance">Distance from point u.</param>
            <param name="angle">Angle in radians.</param>
            <returns></returns>
        </member>
        <member name="M:netDxf.Vector2.Distance(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Distancie.</returns>
        </member>
        <member name="M:netDxf.Vector2.SquareDistance(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector2.Angle(netDxf.Vector2)">
            <summary>
            Obtains the angle of a vector.
            </summary>
            <param name="u">A Vector2.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector2.Angle(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the angle of a line defined by two points.
            </summary>
            <param name="u">A Vector2.</param>
            <param name="v">A Vector2.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector2.MidPoint(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the midpoint.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are penpendicular or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are parallel or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Round(netDxf.Vector2,System.Int32)">
            <summary>
            Rounds the components of a vector.
            </summary>
            <param name="u">Vector2.</param>
            <param name="numDigits">Number of significative defcimal digits.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Equality(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if the two components are equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Inequality(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if the two components are different or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Addition(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Subtraction(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Substracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The substraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_UnaryNegation(netDxf.Vector2)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector2.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(netDxf.Vector2,System.Double)">
            <summary>
            Multuplies a vector with an scalar (same as a*u, conmutative property).
            </summary>
            <param name="u">Vector2.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(System.Double,netDxf.Vector2)">
            <summary>
            Multuplies an scalar with a vector (same as u*a, conmutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Division(netDxf.Vector2,System.Double)">
            <summary>
            Divides a vector with an scalar (not same as a/v).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Division(System.Double,netDxf.Vector2)">
            <summary>
            Divides an scalar with a vector (not same as v/a).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector2.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equals.
            </summary>
            <param name="obj">Another Vector2 to compare to.</param>
            <param name="threshold">Maximun tolerance.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="P:netDxf.Vector2.Zero">
            <summary>
            Zero vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets a vector element defined by its index.
            </summary>
            <param name="index">Index of the element.</param>
        </member>
        <member name="T:netDxf.Vector3">
            <summary>
            Represent a three component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:netDxf.Vector3.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="array">Array of three elements that represents the vector.</param>
        </member>
        <member name="M:netDxf.Vector3.DotProduct(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector3.CrossProduct(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the cross product of two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:netDxf.Vector3.Distance(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Distancie.</returns>
        </member>
        <member name="M:netDxf.Vector3.SquareDistance(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector3.AngleBetween(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the angle between two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector3.MidPoint(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the midpoint.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:netDxf.Vector3.ArePerpendicular(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are penpendicular or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.AreParallel(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are parallel or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Round(netDxf.Vector3,System.Int32)">
            <summary>
            Rounds the components of a vector.
            </summary>
            <param name="u">Vector3.</param>
            <param name="numDigits">Number of significative defcimal digits.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Equality(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if the three components are equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Inequality(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if the three components are different or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Addition(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Subtraction(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Substracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The substraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_UnaryNegation(netDxf.Vector3)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector3.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(netDxf.Vector3,System.Double)">
            <summary>
            Multuplies a vector with an scalar (same as a*u, conmutative property).
            </summary>
            <param name="u">Vector3.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(System.Double,netDxf.Vector3)">
            <summary>
            Multuplies an scalar with a vector (same as u*a, conmutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Division(netDxf.Vector3,System.Double)">
            <summary>
            Divides a vector with an scalar (not same as a/v).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Division(System.Double,netDxf.Vector3)">
            <summary>
            Divides an scalar with a vector (not same as v/a).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector3.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
            <exception cref="T:System.ArithmeticException"></exception>
        </member>
        <member name="M:netDxf.Vector3.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="obj">Vector3.</param>
            <param name="threshold">Maximun tolerance.</param>
            <returns>True if the three components are almost equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="P:netDxf.Vector3.Zero">
            <summary>
            Zero vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitZ">
            <summary>
            Unit Z vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Z">
            <summary>
            Gets or sets the Z component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets a vector element defined by its index.
            </summary>
            <param name="index">Index of the element.</param>
        </member>
        <member name="T:netDxf.Matrix3">
            <summary>
            Represents a 3x3 double precision matrix.
            </summary>
        </member>
        <member name="M:netDxf.Matrix3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix3.
            </summary>
            <param name="m11">Element [0,0].</param>
            <param name="m12">Element [0,1].</param>
            <param name="m13">Element [0,1].</param>
            <param name="m21">Element [1,0].</param>
            <param name="m22">Element [1,1].</param>
            <param name="m23">Element [1,2].</param>
            <param name="m31">Element [2,0].</param>
            <param name="m32">Element [2,1].</param>
            <param name="m33">Element [2,2].</param>
        </member>
        <member name="M:netDxf.Matrix3.op_Addition(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Subtraction(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix substraction.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="u">Vector3d.</param>
            <returns>Matrix3.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors to represent three dimensional points.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix3.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Determinant">
            <summary>
            Calculate the determinant of the actual matrix.
            </summary>
            <returns>Determiant.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Inverse">
            <summary>
            Calculates the inverse matrix.
            </summary>
            <returns>Inverse Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Traspose">
            <summary>
            Obtains the traspose matrix.
            </summary>
            <returns>Transpose matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.RotationX(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors to represent three dimensional points.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.RotationY(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors to represent three dimensional points.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.RotationZ(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors to represent three dimensional points.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.Scale(System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="scale">Single scale factor for x, y, and z axes.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Scale(netDxf.Vector3)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="scale">Scale factors for x, y, and z axes.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="x">Scale factor for x-axis.</param>
            <param name="y">Scale factor for y-axis.</param>
            <param name="z">Scale factor for z-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.ToString">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Matrix3.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="P:netDxf.Matrix3.Zero">
            <summary>
            Gets the zero matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.Identity">
            <summary>
            Getx the identity matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M11">
            <summary>
            Gets or sets the matrix element [0,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M12">
            <summary>
            Gets or sets the matrix element [0,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M13">
            <summary>
            Gets or sets the matrix element [0,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M21">
            <summary>
            Gets or sets the matrix element [1,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M22">
            <summary>
            Gets or sets the matrix element [1,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M23">
            <summary>
            Gets or sets the matrix element [1,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M31">
            <summary>
            Gets or sets the matrix element [2,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M32">
            <summary>
            Gets or sets the matrix element [2,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M33">
            <summary>
            Gets or sets the matrix element [2,2].
            </summary>
        </member>
        <member name="T:netDxf.DxfObjectCode">
            <summary>
            Dxf entities codes (code 0).
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AppId">
            <summary>
            Application registry.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.DimStyle">
            <summary>
            Dimension style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockRecord">
            <summary>
            Block record.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LineType">
            <summary>
            Line type.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Layer">
            <summary>
            Layer.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ViewPort">
            <summary>
            Viewport.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TextStyle">
            <summary>
            Text style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLineStyle">
            <summary>
            MLine style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.View">
            <summary>
            View.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ucs">
            <summary>
            Ucs.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Block">
            <summary>
            Block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockEnd">
            <summary>
            End block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Line">
            <summary>
            Line.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ellipse">
            <summary>
            Ellipse.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Polyline">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LightWeightPolyline">
            <summary>
            Lightweight polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Point">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Arc">
            <summary>
            Arc.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Spline">
            <summary>
            Spline (nonuniform rational B-splines NURBS).
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Text">
            <summary>
            Text string.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MText">
            <summary>
            Multiline text string.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLine">
            <summary>
            MLine.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Face3d">
            <summary>
            3d face.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Insert">
            <summary>
            Block insertion.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Hatch">
            <summary>
            Hatch.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AttributeDefinition">
            <summary>
            Attribute definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Attribute">
            <summary>
            Attribute.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Vertex">
            <summary>
            Vertex.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndSequence">
            <summary>
            End sequence.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dimension">
            <summary>
            Dimension.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dictionary">
            <summary>
            Dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Image">
            <summary>
            Raster image.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDef">
            <summary>
            Image definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDefReactor">
            <summary>
            Image definition reactor.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.RasterVariables">
            <summary>
            Raster variables.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Group">
            <summary>
            Groups.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Ellipse">
            <summary>
            Represents an ellipse <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor(netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
            <param name="center">Ellipse <see cref="T:netDxf.Vector3">center</see> in object coordinates.</param>
            <param name="majorAxis">Ellipse major axis.</param>
            <param name="minorAxis">Ellipse minor axis.</param>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
            <param name="center">Ellipse <see cref="T:netDxf.Vector2">center</see> in object coordinates.</param>
            <param name="majorAxis">Ellipse major axis.</param>
            <param name="minorAxis">Ellipse minor axis.</param>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <c>ellipse</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.ToPolyline(System.Int32)">
            <summary>
            Converts the ellipse in a Polyline.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.LwPolyline">LightWeightPolyline</see> that represents the ellipse.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.PolarCoordinateRelativeToCenter(System.Double)">
            <summary>
            Calculate the local point on the ellipse for a given angle relative to the center.
            </summary>
            <param name="angle">Angle in degrees.</param>
            <returns>A local point on the ellipse for the given angle relative to the center.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the ellipse in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the ellipse expresed in object coordinate system.</returns>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Center">
            <summary>
            Gets or sets the ellipse <see cref="T:netDxf.Vector3">center</see>.
            </summary>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MajorAxis">
            <summary>
            Gets or sets the ellipse mayor axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MinorAxis">
            <summary>
            Gets or sets the ellipse minor axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Rotation">
            <summary>
            Gets or sets the ellipse local rotation along its normal.
            </summary>
            <remarks>The angle is measured in degrees.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.StartAngle">
            <summary>
            Gets or sets the ellipse start angle in degrees.
            </summary>
            <remarks><c>StartAngle</c> equals 0 and <c>EndAngle</c> equals 360 for a full ellipse.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.EndAngle">
            <summary>
            Gets or sets the ellipse end angle in degrees.
            </summary>
            <remarks><c>StartAngle</c> equals 0 and <c>EndAngle</c> equals 360 for a full ellipse.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.CurvePoints">
            <summary>
            Gets or sets the number of points generated along the ellipse during the conversion to a polyline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Thickness">
            <summary>
            Gets or sets the ellipse thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.IsFullEllipse">
            <summary>
            Checks if the the actual instance is a full ellipse.
            </summary>
        </member>
        <member name="T:netDxf.Entities.EndSequence">
            <summary>
            Represents the terminator element of a vertex sequence in polylines or attributes in a block reference.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EndSequence.#ctor">
            <summary>
            Initializes a new instance of the <c>EndSequence</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EndSequence.Layer">
            <summary>
            Gets or sets the end sequence <see cref="T:netDxf.Tables.Layer">layer</see>
            </summary>
        </member>
        <member name="T:netDxf.Entities.Solid">
            <summary>
            Represents a solid <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Solid.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Solid</c> class.
            </summary>
            <param name="firstVertex">Solid <see cref="T:netDxf.Vector3">first vertex</see>.</param>
            <param name="secondVertex">Solid <see cref="T:netDxf.Vector3">second vertex</see>.</param>
            <param name="thirdVertex">Solid <see cref="T:netDxf.Vector3">third vertex</see>.</param>
            <param name="fourthVertex">Solid <see cref="T:netDxf.Vector3">fourth vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Solid.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Solid</c> class.
            </summary>
            <param name="firstVertex">Solid <see cref="T:netDxf.Vector2">first vertex</see>.</param>
            <param name="secondVertex">Solid <see cref="T:netDxf.Vector2">second vertex</see>.</param>
            <param name="thirdVertex">Solid <see cref="T:netDxf.Vector2">third vertex</see>.</param>
            <param name="fourthVertex">Solid <see cref="T:netDxf.Vector2">fourth vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Solid.#ctor">
            <summary>
            Initializes a new instance of the <c>Solid</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.FirstVertex">
            <summary>
            Gets or sets the first solid <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.SecondVertex">
            <summary>
            Gets or sets the second solid <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.ThirdVertex">
            <summary>
            Gets or sets the third solid <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.FourthVertex">
            <summary>
            Gets or sets the fourth solid <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.Thickness">
            <summary>
            Gets or sets the thickness of the solid.
            </summary>
        </member>
        <member name="T:netDxf.Header.HeaderVariable">
            <summary>
            Defines a header variable.
            </summary>
        </member>
        <member name="T:netDxf.StringEnum">
            <summary>
            Helper class for working with 'extended' enums using <see cref="T:netDxf.StringValueAttribute"/> attributes.
            </summary>
        </member>
        <member name="M:netDxf.StringEnum.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:netDxf.StringEnum"/> instance.
            </summary>
            <param name="enumType">Enum type.</param>
        </member>
        <member name="M:netDxf.StringEnum.GetStringValue(System.String)">
            <summary>
            Gets the string value associated with the given enum value.
            </summary>
            <param name="valueName">Name of the enum value.</param>
            <returns>String Value</returns>
        </member>
        <member name="M:netDxf.StringEnum.GetStringValues">
            <summary>
            Gets the string values associated with the enum.
            </summary>
            <returns>String value array</returns>
        </member>
        <member name="M:netDxf.StringEnum.IsStringDefined(System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:netDxf.StringEnum.IsStringDefined(System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:netDxf.StringEnum.GetStringValue(System.Enum)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="value">Value.</param>
            <returns>String Value associated via a <see cref="T:netDxf.StringValueAttribute"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:netDxf.StringEnum.Parse(System.Type,System.String)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value (case sensitive).
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:netDxf.StringEnum.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:netDxf.StringEnum.IsStringDefined(System.Type,System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:netDxf.StringEnum.IsStringDefined(System.Type,System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="P:netDxf.StringEnum.EnumType">
            <summary>
            Gets the underlying enum type for this instance.
            </summary>
            <value></value>
        </member>
        <member name="T:netDxf.StringValueAttribute">
            <summary>
            Simple attribute class for storing String Values
            </summary>
        </member>
        <member name="M:netDxf.StringValueAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:netDxf.StringValueAttribute"/> instance.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="P:netDxf.StringValueAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value></value>
        </member>
        <member name="T:netDxf.SubclassMarker">
            <summary>
            Dxf object subclass string markers (code 100).
            </summary>
        </member>
        <member name="T:netDxf.Symbols">
            <summary>
            Symbols for dxf text strings.
            </summary>
            <remarks>
            These special strings translates to symbols in AutoCad. 
            </remarks>
        </member>
        <member name="F:netDxf.Symbols.Diameter">
            <summary>
            Text string that shows as a diameter 'Ø' character.
            </summary>
        </member>
        <member name="F:netDxf.Symbols.Degree">
            <summary>
            Text string that shows as a degree '°' character.
            </summary>
        </member>
        <member name="F:netDxf.Symbols.PlusMinus">
            <summary>
            Text string that shows as a plus-minus '±' character.
            </summary>
        </member>
        <member name="T:netDxf.Tables.ApplicationRegistry">
            <summary>
            Represents a registered application name to which the <see cref="T:netDxf.XData">extended data</see> is associated.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ApplicationRegistry</c> class.
            </summary>
            <param name="name">Layer name.</param>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.Equals(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Determines whether the specified <see cref="T:netDxf.Tables.ApplicationRegistry"/> is equal to the current <see cref="T:netDxf.Tables.ApplicationRegistry"/>.
            </summary>
            <returns>
            True if the specified <see cref="T:netDxf.Tables.ApplicationRegistry"/> is equal to the current <see cref="T:netDxf.Tables.ApplicationRegistry"/>; otherwise, false.
            </returns>
            <remarks>Two <see cref="T:netDxf.Tables.ApplicationRegistry"/> instances are equal if their names are equal.</remarks>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj"> The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.GetHashCode">
            <summary>
             Serves as a hash function for a particular type. 
            </summary>
            <returns>
             A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="P:netDxf.Tables.ApplicationRegistry.Default">
            <summary>
            Gets the default application registry.
            </summary>
        </member>
        <member name="T:netDxf.Tables.BlockRecord">
            <summary>
            Represent the record of a block in the tables section.
            </summary>
        </member>
        <member name="M:netDxf.Tables.BlockRecord.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>BlockRecord</c> class.
            </summary>
            <param name="name">Block definition name.</param>
        </member>
        <member name="P:netDxf.Tables.BlockRecord.Units">
            <summary>
            Block insertion units.
            </summary>
        </member>
        <member name="M:netDxf.Tables.View.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>View</c> class.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyle">
            <summary>
            Represents as dimension style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DimensionStyle</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextStyle">
            <summary>
            Gets or sets the text style of the dimension.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMGAP">
            <summary>
            Sets the distance around the dimension text when the dimension line breaks to accommodate dimension text.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMEXO">
            <summary>
            Specifies how far extension lines are offset from origin points.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMEXE">
            <summary>
            Specifies how far to extend the extension line beyond the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMASZ">
            <summary>
            Controls the size of dimension line and leader line arrowheads. Also controls the size of hook lines.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMTXT">
            <summary>
            Specifies the height of dimension text, unless the current text style has a fixed height.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMJUST">
            <summary>
            Controls the horizontal positioning of dimension text.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMTAD">
            <summary>
            Controls the vertical position of text in relation to the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMDEC">
            <summary>
            Sets the number of decimal places displayed for the primary units of a dimension.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMCEN">
            <summary>
            Controls drawing of circle or arc center marks and centerlines.
            </summary>
            <remarks>
            0 - No center marks or lines are drawn.<br />
            greater than 0 - Centerlines are drawn.<br />
            lower than 0 - Center marks are drawn.<br />
            The absolute value specifies the size of the center mark or centerline. 
            The size of the centerline is the length of the centerline segment that extends outside the circle or arc.
            It is also the size of the gap between the center mark and the start of the centerline. 
            The size of the center mark is the distance from the center of the circle or arc to the end of the center mark. 
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMADEC">
            <summary>
            Controls the number of precision places displayed in angular dimensions.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMPOST">
            <summary>
            Specifies a text prefix or suffix (or both) to the dimension measurement.
            </summary>
            <remarks>
            Use "&lt;&gt;" to indicate placement of the text in relation to the dimension value. 
            For example, enter "&lt;&gt;mm" to display a 5.0 millimeter radial dimension as "5.0mm". 
            If you entered "mm &lt;&gt;", the dimension would be displayed as "mm 5.0".
            Use the "&lt;&gt;" mechanism for angular dimensions.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMTIH">
            <summary>
            Controls the position of dimension text inside the extension lines for all dimension types except Ordinate.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMTOH">
            <summary>
            Controls the position of dimension text outside the extension lines.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMDSEP">
            <summary>
            Specifies a single-character decimal separator to use when creating dimensions whose unit format is decimal.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMAUNIT">
            <summary>
            Gets the units format for angular dimensions.
            </summary>
            <remarks>
            0 Decimal degrees
            1 Degrees/minutes/seconds
            2 Gradians
            3 Radians
            </remarks>
        </member>
        <member name="M:netDxf.Tables.ViewPort.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ViewPort</c> class.
            </summary>
        </member>
        <member name="T:netDxf.Entities.TextAlignment">
            <summary>
            Defines the text alignment.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.TopLeft">
            <summary>
            Top left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.TopCenter">
            <summary>
            Top center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.TopRight">
            <summary>
            Top right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.MiddleLeft">
            <summary>
            Middle left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.MiddleCenter">
            <summary>
            Middle center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.MiddleRight">
            <summary>
            Middle right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BottomLeft">
            <summary>
            Bottom left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BottomCenter">
            <summary>
            Bottom center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BottomRight">
            <summary>
            Bottom right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BaselineLeft">
            <summary>
            Baseline left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BaselineCenter">
            <summary>
            Baseline center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BaselineRight">
            <summary>
            Baseline right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.Aligned">
            <summary>
            Aligned (if vertical alignment = 0).
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.Middle">
            <summary>
            Middle (if vertical alignment = 0)
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.Fit">
            <summary>
            Fit (if vertical alignment = 0)
            </summary>
        </member>
        <member name="T:netDxf.DxfDocument">
            <summary>
            Represents a document to read and write dxf files.
            </summary>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor">
            <summary>
            Initalizes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <remarks>The default <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see> of the document will be used.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.DxfVersion)">
            <summary>
            Initalizes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="version">AutoCAD drawing database version number.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.HeaderVariables)">
            <summary>
            Initalizes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
        </member>
        <member name="M:netDxf.DxfDocument.AddApplicationRegistry(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Adds an application registry to the dictionary.
            </summary>
            <param name="appReg"><see cref="T:netDxf.Tables.ApplicationRegistry">Application registry</see> to add to the dictionary.</param>
            <returns>
            If an application registry already exists with the same name as the instance that is being added the method returns the existing application registry,
            if not it will return the new application registry.
            </returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetApplicationRegistry(System.String)">
            <summary>
            Gets an application registry from the the dictionary.
            </summary>
            <param name="appRegName"><see cref="T:netDxf.Tables.ApplicationRegistry">Application registry</see> name.</param>
            <returns>Application registry with the actual name, null if it does not exists.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.AddLayer(netDxf.Tables.Layer)">
            <summary>
            Adds a layer to the dictionary.
            </summary>
            <param name="layer"><see cref="T:netDxf.Tables.Layer">Layer</see> to add to the dictionary.</param>
            <returns>
            If a layer already exists with the same name as the instance that is being added the method returns the existing layer,
            if not it will return the new layer.
            </returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetLayer(System.String)">
            <summary>
            Gets a layer from the the dictionary.
            </summary>
            <param name="layerName"><see cref="T:netDxf.Tables.Layer">Layer</see> name.</param>
            <returns>Layer with the actual name, null if it does not exists.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.AddLineType(netDxf.Tables.LineType)">
            <summary>
            Adds a line type to the table.
            </summary>
            <param name="lineType"><see cref="T:netDxf.Tables.LineType">Line type</see> to add to the dictionary.</param>
            <returns>
            If a line type already exists with the same name as the instance that is being added the method returns the existing line type,
            if not it will return the new line type.
            </returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetLineType(System.String)">
            <summary>
            Gets a line type from the the dictionary.
            </summary>
            <param name="lineTypeName"><see cref="T:netDxf.Tables.LineType">Line type</see> name.</param>
            <returns>Line type with the actual name, null if it does not exists.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.AddTextStyle(netDxf.Tables.TextStyle)">
            <summary>
            Adds a text style to the dictionary.
            </summary>
            <param name="textStyle"><see cref="T:netDxf.Tables.TextStyle">Text style</see> to add to the dictionary.</param>
            <returns>
            If a text style already exists with the same name as the instance that is being added the method returns the existing text style,
            if not it will return the new text style.
            </returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetTextStyle(System.String)">
            <summary>
            Gets a text style from the the dictionary.
            </summary>
            <param name="textStyleName"><see cref="T:netDxf.Tables.TextStyle">Text style</see> name.</param>
            <returns>Text style with the actual name, null if it does not exists.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.AddDimensionStyle(netDxf.Tables.DimensionStyle)">
            <summary>
            Adds a dimension style to the dictionary.
            </summary>
            <param name="dimensionStyle"><see cref="T:netDxf.Tables.DimensionStyle">Dimension style</see> to add to the dictionary.</param>
            <returns>
            If a dimension style already exists with the same name as the instance that is being added the method returns the existing dimension style,
            if not it will return the new dimension style.
            </returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetDimensionStyle(System.String)">
            <summary>
            Gets a dimension style from the the dictionary.
            </summary>
            <param name="dimensionStyleName"><see cref="T:netDxf.Tables.DimensionStyle">Dimension style</see> name.</param>
            <returns>Dimension style with the actual name, null if it does not exists.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.AddBlock(netDxf.Blocks.Block)">
            <summary>
            Adds a block to the dictionary.
            </summary>
            <param name="block"><see cref="T:netDxf.Blocks.Block">Block</see> to add to the dictionary.</param>
            <returns>
            If a block already exists with the same name as the instance that is being added the method returns the existing block,
            if not it will return the new block.
            </returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetBlock(System.String)">
            <summary>
            Gets a block from the the dictionary.
            </summary>
            <param name="blockName"><see cref="T:netDxf.Blocks.Block">Block</see> name.</param>
            <returns>Block with the actual name, null if it does not exists.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetEntityByHandle(System.String)">
            <summary>
            Gets an entity provided its handle.
            </summary>
            <param name="handle">Entity object handle.</param>
            <returns>The entity associated with the provided handle, null if it is not found.</returns>
            <remarks>This method will also return entities that are part of a block definition.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.AddEntity(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Adds a list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to the document.
            </summary>
            <param name="entities">A list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to add to the document.</param>
            <remarks>
            <para>
            Once an entity has been added to the dxf document, it should not be modified. A unique handle identifier is assigned to every entity.
            </para>
            <para>
            This is specially true in the case of dimensions. The block that represents the drawing of the dimension is built
            when it is added to the document. If a property is modified once it has been added this modifications will not be 
            reflected in the saved dxf file.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.AddEntity(netDxf.Entities.EntityObject)">
            <summary>
            Adds an <see cref="T:netDxf.Entities.EntityObject">entity</see> to the document.
            </summary>
            <param name="entity">An <see cref="T:netDxf.Entities.EntityObject">entity</see> to add to the document.</param>
            <remarks>
            <returns>True if the entity has been added to the document, false otherwise.</returns>
            <para>
            Once an entity has been added to the dxf document a unique handle identifier (hexadecimal number) is assigned to them.
            </para>
            <para>
            The entities should not be modified. This is specially true in the case of dimensions. The block that represents the drawing of the dimension is built
            when it is added to the document. If a property is modified once it has been added this modifications will not be reflected in the saved dxf file.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.RemoveEntity(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Removes a list of <see cref="T:netDxf.Entities.EntityObject">entities</see> from the document.
            </summary>
            <param name="entities">A list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to remove from the document.</param>
            <remarks>
            This function will not remove other tables objects that might be not in use as result from the elimination of the entity.<br/>
            This includes empity layers, blocks not referenced anymore, line types, text styles, dimension styles, and application registries.<br/>
            Entities that are part of a block definition will not be removed.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.RemoveEntity(netDxf.Entities.EntityObject)">
            <summary>
            Removes an <see cref="T:netDxf.Entities.EntityObject">entity</see> from the document.
            </summary>
            <param name="entity">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to remove from the document.</param>
            <returns>True if item is successfully removed; otherwise, false. This method also returns false if item was not found.</returns>
            <remarks>
            This function will not remove other tables objects that might be not in use as result from the elimination of the entity.<br/>
            This includes empity layers, blocks not referenced anymore, line types, text styles, dimension styles, multiline styles, groups, and application registries.<br/>
            Entities that are part of a block definition will not be removed.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.AddImageDef(netDxf.Objects.ImageDef)">
            <summary>
            Adds an image definition to the dictionary.
            </summary>
            <param name="imageDef"><see cref="T:netDxf.Objects.ImageDef">Image definition</see> to add to the dictionary.</param>
            <returns>
            If an image definition already exists with the same name as the instance that is being added the method returns the existing image definition,
            if not it will return the new image definition.
            </returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetImageDef(System.String)">
            <summary>
            Gets an image definition from the the dictionary.
            </summary>
            <param name="imageDefName"><see cref="T:netDxf.Objects.ImageDef">Image definition</see> name.</param>
            <returns>Image definition with the actual name, null if it does not exists.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.AddMLineStyle(netDxf.Objects.MLineStyle)">
            <summary>
            Adds a MLine style to the dictionary.
            </summary>
            <param name="mLineStyle">MLine <see cref="T:netDxf.Objects.MLineStyle">style</see> to add to the dictionary.</param>
            <returns>
            If a MLine style already exists with the same name as the instance that is being added the method returns the existing MLine style,
            if not it will return the new MLine style.
            </returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetMLineStyle(System.String)">
            <summary>
            Gets a MLine style from the the dictionary.
            </summary>
            <param name="mLineStyleName">MLine <see cref="T:netDxf.Objects.MLineStyle">style</see> name.</param>
            <returns>MLine style with the actual name, null if it does not exists.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.AddGroup(netDxf.Objects.Group)">
            <summary>
            Adds a group to the list.
            </summary>
            <param name="group"><see cref="T:netDxf.Objects.Group">Group</see> to add to the list.</param>
            <returns>
            If a group already exists with the same name as the instance that is being added the method returns the existing group,
            if not it will return the new group.
            </returns>
            <remarks>All entities of the group will be automatically added to the document.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.GetGroup(System.String)">
            <summary>
            Gets a group from the the dictionary.
            </summary>
            <param name="groupName"><see cref="T:netDxf.Objects.Group">Group</see> name.</param>
            <returns>Group with the actual name, null if it does not exists.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.RemoveGroup(netDxf.Objects.Group,System.Boolean)">
            <summary>
            Removes a group from the list.
            </summary>
            <param name="group"><see cref="T:netDxf.Objects.Group">Group</see> to remove from the list.</param>
            <param name="removeEntities">Defines if the entities contained in the group will be deleted.</param>
            <returns>True if group is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.String)">
            <summary>
            Loads a dxf file.
            </summary>
            <param name="file">File name.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <remarks>
            Loading dxf files prior to AutoCad 2000 is not supported.<br/>
            The Load method will still raise an exception if they are unable to create the FileStream.<br/>
            On Debug mode it will raise any exception that migh occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.IO.Stream)">
            <summary>
            Loads a dxf file.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <remarks>
            Loading dxf files prior to AutoCad 2000 is not supported.<br />
            On Debug mode it will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.String)">
            <summary>
            Saves the database of the actual DxfDocument to a dxf file.
            </summary>
            <param name="file">File name.</param>
            <returns>Return true if the file has been succesfully save, false otherwise.</returns>
            <exception cref="T:System.IO.IOException"></exception>
            <remarks>
            If the file already exists it will be overwritten.<br/>
            The Save method will still raise an exception if they are unable to create the FileStream.<br/>
            On Debug mode they will raise any exception that migh occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.IO.Stream)">
            <summary>
            Saves the database of the actual DxfDocument to a stream.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Return true if the stream has been succesfully saved, false otherwise.</returns>
            <remarks>
            On Debug mode it will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.IO.Stream)">
            <summary>
            Checks the AutoCAD dxf file database version.
            </summary>
            <param name="stream">Stream</param>
            <returns>String that represents the dxf file version.</returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.String)">
            <summary>
            Checks the AutoCAD dxf file database version.
            </summary>
            <param name="file">File name.</param>
            <returns>String that represents the dxf file version.</returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="P:netDxf.DxfDocument.Comments">
            <summary>
            Gets or sets the name of the document, once a file is saved or loaded this field is equals the file name without extension.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.DrawingVariables">
            <summary>
            Gets the dxf <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see>.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Name">
            <summary>
            Gets or sets the name of the document, once a file is saved or loaded this field is equals the file name without extension.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.AppRegisterNames">
            <summary>
            Gets the <see cref="T:netDxf.Tables.ApplicationRegistry">application registries</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Layers">
            <summary>
            Gets the <see cref="T:netDxf.Tables.Layer">layer</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.LineTypes">
            <summary>
            Gets the <see cref="T:netDxf.Tables.LineType">linetype</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.TextStyles">
            <summary>
            Gets the <see cref="T:netDxf.Tables.TextStyle">text style</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Blocks">
            <summary>
            Gets the <see cref="T:netDxf.Blocks.Block">block</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Arcs">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Arc">arcs</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Ellipses">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Ellipse">ellipses</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Circles">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Circle">circles</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Faces3d">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Face3d">3d faces</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Solids">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Solid">solids</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Inserts">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Insert">inserts</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Lines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Line">lines</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Polylines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Polyline">polylines</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.LwPolylines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.LwPolyline">light weight polylines</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.PolyfaceMeshes">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.PolyfaceMeshes">polyface meshes</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Points">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Point">points</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Texts">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Text">texts</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.MTexts">
            <summary>
            Gets the <see cref="T:netDxf.Entities.MText">multiline texts</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Hatches">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Hatch">hatches</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Images">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Image">images</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.MLines">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.MLines">multilines</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Dimensions">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Dimension">dimensions</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Splines">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Splines">splines</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.RasterVariables">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.RasterVariables">raster variables</see> applied to image entities.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.ImageDefs">
            <summary>
            Gets the <see cref="T:netDxf.Objects.ImageDef">image definitions</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.MLineStyles">
            <summary>
            Gets the <see cref="T:netDxf.Objects.MLineStyle">MLine styles</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Groups">
            <summary>
            Gets the <see cref="T:netDxf.Objects.Group">group</see> list.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Arc">
            <summary>
            Represents a circular arc <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector2,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="center">Arc <see cref="T:netDxf.Vector2">center</see> in world coordinates.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="center">Arc <see cref="T:netDxf.Vector3">center</see> in world coordinates.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
        </member>
        <member name="M:netDxf.Entities.Arc.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the arc in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the arc expresed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Arc.ToPolyline(System.Int32)">
            <summary>
            Converts the arc in a Polyline.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.LwPolyline">LightWeightPolyline</see> that represents the arc.</returns>
        </member>
        <member name="P:netDxf.Entities.Arc.Center">
            <summary>
            Gets or sets the arc <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Radius">
            <summary>
            Gets or sets the arc radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.StartAngle">
            <summary>
            Gets or sets the arc start angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.EndAngle">
            <summary>
            Gets or sets the arc end angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Thickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Attribute">
            <summary>
            Represents a attribute <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            The attribute position, rotation, height and width factor values also includes the transformation of the <see cref="T:netDxf.Entities.Insert">Insert</see> entity to which it belongs.<br/>
            During the attribute initialization a copy of all attribute definition properties will be copied,
            so any changes made to the attribute definition will only be applied to new attribute instances and not to existing ones.
            This behaviour is to allow imported <see cref="T:netDxf.Entities.Insert">Insert</see> entities to have attributes without definition in the block, 
            althought this might sound not totally correct it is allowed by AutoCad.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Intitializes a new instance of the <c>Attribute</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Entities.AttributeDefinition">Attribute definition</see>.</param>
            <remarks>
            Althought the attribute entity could override values defined in its definiton for simplicity the implementation has restricted this posibility.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.#ctor(netDxf.Entities.AttributeDefinition,System.Object)">
            <summary>
            Intitializes a new instance of the <c>Attribute</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Entities.AttributeDefinition">Attribute definition</see>.</param>
            <param name="value">Attribute value.</param>
        </member>
        <member name="P:netDxf.Entities.Attribute.Definition">
            <summary>
            Gets the attribute definition.
            </summary>
            <remarks>If the insert attribute has no definition it will return null.</remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Id">
            <summary>
            Gets the attribute identifier.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Height">
            <summary>
            Gets or sets the attribute text height.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.WidthFactor">
            <summary>
            Gets or sets the attribute text width factor.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Style">
            <summary>
            Gets or sets the attribute text style.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Tables.TextStyle">text style</see> defines the basic properties of the information text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Position">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">position</see> in object coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Flags">
            <summary>
            Gets or sets the attribute flags.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Rotation">
            <summary>
            Gets or sets the attribute text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="T:netDxf.Entities.AttributeFlags">
            <summary>Attribute flags.</summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Visible">
            <summary>
            Attribute is visible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Hidden">
            <summary>
            Attribute is invisible (does not appear).
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Constant">
            <summary>
            This is a constant attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Verify">
            <summary>
            Verification is required on input of this attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Predefined">
            <summary>
            Attribute is preset (no prompt during insertion).
            </summary>
        </member>
        <member name="T:netDxf.Entities.AttributeDefinition">
            <summary>
            Represents a attribute definition <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String)">
            <summary>
            Intitializes a new instance of the <c>AttributeDefiniton</c> class.
            </summary>
            <param name="id">Attribute identifier, the parameter <c>id</c> string cannot contain spaces.</param>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String,netDxf.Tables.TextStyle)">
            <summary>
            Intitializes a new instance of the <c>AttributeDefiniton</c> class.
            </summary>
            <param name="id">Attribute identifier, the parameter <c>id</c> string cannot contain spaces.</param>
            <param name="style">Attribute <see cref="T:netDxf.Tables.TextStyle">text style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Id">
            <summary>
            Gets the attribute identifier.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Text">
            <summary>
            Gets or sets the attribute information text.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Height">
            <summary>
            Gets or sets the attribute text height.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.WidthFactor">
            <summary>
            Gets or sets the attribute text width factor.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Value">
            <summary>
            Gets or sets the attribute default value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Style">
            <summary>
            Gets or sets  the attribute text style.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Tables.TextStyle">text style</see> defines the basic properties of the information text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Position">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">position</see> in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Flags">
            <summary>
            Gets or sets the attribute flags.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Rotation">
            <summary>
            Gets or sets the attribute text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Vertex">
            <summary>
            Represents a dxf Vertex.
            </summary>
            <remarks>
            The Vertex class holds all the information read from the dxf file even if its needed or not.
            For internal use only.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="location">Vertex <see cref="T:netDxf.Vector2">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="location">Vertex <see cref="T:netDxf.Vector3">location</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Vertex.Location">
            <summary>
            Gets or sets the polyline vertex <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.BeginThickness">
            <summary>
            Gets or sets the light weight polyline begin thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.EndThickness">
            <summary>
            Gets or sets the light weight polyline end thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Bulge">
            <summary>
            Gets or set the light weight polyline bulge.Accepted values range from 0 to 1.
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the included angle for an arc segment, 
            made negative if the arc goes clockwise from the start point to the endpoint. 
            A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Vertex.Flags">
            <summary>
            Gets or sets the vertex type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Color">
            <summary>
            Gets or sets the entity color.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Layer">
            <summary>
            Gets or sets the entity layer.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.LineType">
            <summary>
            Gets or sets the entity line type.
            </summary>
        </member>
        <member name="T:netDxf.Entities.PolylineVertex">
            <summary>
            Represents a <see cref="T:netDxf.Entities.Polyline">polyline</see> vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="location">Polyline <see cref="T:netDxf.Vector3">vertex</see> coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Location">
            <summary>
            Gets or sets the vertex <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Flags">
            <summary>
            Gets the vertex type.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Point">
            <summary>
            Represents a point <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="location">Point <see cref="T:netDxf.Vector3">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="location">Point <see cref="T:netDxf.Vector2">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Location">
            <summary>
            Gets or sets the point <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Thickness">
            <summary>
            Gets or sets the point thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Rotation">
            <summary>
            Gets or sets the point local rotation along its normal.
            </summary>
            <remarks>The angle is measured in degrees.</remarks>
        </member>
        <member name="T:netDxf.Entities.PolyfaceMeshFace">
            <summary>
            Represents a polyface mesh face. 
            </summary>
            <remarks>
            The way the vertex indexes for a polyfacemesh are defined follows the dxf documentation.
            The values of the vertex indexes specify one of the previously defined vertexes by the index in the list plus one.
            If the index is negative, the edge that begins with that vertex is invisible.
            For example if the vertex index in the list is 0 the vertex index for the face will be 1, and
            if the edge between the vertexes 0 and 1 is hidden the vertex index for the face will be -1.
            The maximum number of vertex indexes in a face is 4.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.#ctor">
            <summary>
            Initializes a new instance of the <c>PolyfaceMeshFace</c> class.
            </summary>
            <remarks>
            By default the face is made up of four vertexes.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <c>PolyfaceMeshFace</c> class.
            </summary>
            <param name="vertexIndexes">Array of indexes to the vertex list of a polyface mesh that makes up the face.</param>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.VertexIndexes">
            <summary>
            Gets or sets the array of indexes to the vertex list of a polyface mesh that makes up the face.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.Flags">
            <summary>
            Gets the vertex type.
            </summary>
        </member>
        <member name="T:netDxf.Entities.PolyfaceMeshVertex">
            <summary>
            Represents a polyface mesh vertex. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the PolylineVertex class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="location">Polyface mesh vertex <see cref="T:netDxf.Vector3">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshVertex.Location">
            <summary>
            Gets or sets the polyface mesh vertex <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshVertex.Flags">
            <summary>
            Gets the vertex type.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Polyline">
            <summary>
            Represents a generic polyline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor(System.Collections.Generic.List{netDxf.Entities.PolylineVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
            <param name="vertexes">3d polyline <see cref="T:netDxf.Entities.PolylineVertex">vertex</see> list.</param>
            <param name="isClosed">Sets if the polyline is closed.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline.Explode">
            <summary>
            Decompose the actual polyline in a list of <see cref="T:netDxf.Entities.Line">lines</see>.
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see> that made up the polyline.</returns>
        </member>
        <member name="P:netDxf.Entities.Polyline.Vertexes">
            <summary>
            Gets or sets the polyline <see cref="T:netDxf.Entities.PolylineVertex">vertex</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.IsClosed">
            <summary>
            Gets or sets if the light weight polyline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.SmoothType">
            <summary>
            Gets the curve smooth type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Flags">
            <summary>
            Gets the polyline type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.EndSequence">
            <summary>
            Gets the end vertex sequence.
            </summary>
        </member>
        <member name="T:netDxf.Entities.EntityType">
            <summary>
            Defines the entity type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Line">
            <summary>
            Line entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Polyline">
            <summary>
            3d polyline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.LightWeightPolyline">
            <summary>
            Lightweight polyline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.PolyfaceMesh">
            <summary>
            Polyface mesh entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Circle">
            <summary>
            Circle entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Ellipse">
            <summary>
            Ellipse entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Point">
            <summary>
            Point entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Arc">
            <summary>
            Arc entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Text">
            <summary>
            Text string entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.MText">
            <summary>
            Multiline text string entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.MLine">
            <summary>
            Multiline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Face3D">
            <summary>
            3d face entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Spline">
            <summary>
            Spline (nonuniform rational B-splines NURBS).
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Insert">
            <summary>
            Block insertion entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Hatch">
            <summary>
            Hatch entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Attribute">
            <summary>
            Attribute entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.AttributeDefinition">
            <summary>
            Attribute definition entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Dimension">
            <summary>
            Dimension entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Image">
            <summary>
            A raster image entity.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Insert">
            <summary>
            Represents a block insertion <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="position">Insert <see cref="T:netDxf.Vector3">point</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="position">Insert <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert <see cref="P:netDxf.Entities.Insert.Block">block definition</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.TransformAttributes">
            <summary>
            Recalculate the attributes position, rotation, height and width factor with the values applied to the insertion.
            </summary>
            <remarks>
            The attributes position, rotation, height and width factor values includes the transformations applied to the insertion,
            if required this method will calculate the proper values according to the ones defined by the attribute definition.<br />
            Initially the attribute properties holds the same values as the attribute definition but once it belongs to an insertion its values can be changed manually
            independently to its definition, usually you will want that the position, rotation, height and/or width factor are transformed with the insert
            as is the behaviour inside AutoCad.<br />
            This method only applies to attributes that have a definition, some dxf files might generate attributes that have no definition in the block.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Insert.Attributes">
            <summary>
            Gets the insert list of <see cref="T:netDxf.Entities.Attribute">attributes</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Block">
            <summary>
            Gets the insert <see cref="P:netDxf.Entities.Insert.Block">block definition</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Position">
            <summary>
            Gets or sets the <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Scale">
            <summary>
            Gets or sets the insert <see cref="T:netDxf.Vector3">scale</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Rotation">
            <summary>
            Gets or sets the insert rotation along the normal vector in degrees.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Line">
            <summary>
            Represents a line <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
            <param name="startPoint">Line <see cref="T:netDxf.Vector2">start point.</see></param>
            <param name="endPoint">Line <see cref="T:netDxf.Vector2">end point.</see></param>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
            <param name="startPoint">Line start <see cref="T:netDxf.Vector3">point.</see></param>
            <param name="endPoint">Line end <see cref="T:netDxf.Vector3">point.</see></param>
        </member>
        <member name="P:netDxf.Entities.Line.StartPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">start point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.EndPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">end point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="T:netDxf.Blocks.Block">
            <summary>
            Represents a block definition.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
            <remarks>Do not give names starting with * to block definitions, they are reserved for internal use.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:netDxf.Blocks.Block.Name">
            <summary>
            Gets the block name.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Position">
            <summary>
            Gets or sets the block position in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.InsertionUnits">
            <summary>
            Block insertion units.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Layer">
            <summary>
            Gets or sets the block <see cref="P:netDxf.Blocks.Block.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Attributes">
            <summary>
            Gets or sets the block <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Entities">
            <summary>
            Gets or sets the <see cref="T:netDxf.Entities.EntityObject">entity</see> list that makes the block.
            </summary>
            <remarks>
            It is recommended to define the entities of a block in the default layer "0".<br/>
            The UCS in effect when a block definition is created becomes the WCS for all entities in the block definition.
            The new origin for these entities is shifted to  match the base point defined for the block definition.
            All entity data is translated to fit this new WCS.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.TypeFlags">
            <summary>
            Gets or sets the block-type flags (bit-coded values, may be combined).
            </summary>
        </member>
        <member name="T:netDxf.Entities.Circle">
            <summary>
            Represents a circle <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor(netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
            <param name="center">Circle <see cref="T:netDxf.Vector3">center</see> in world coordinates.</param>
            <param name="radius">Circle radius.</param>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
            <param name="center">Circle <see cref="T:netDxf.Vector2">center</see> in world coordinates.</param>
            <param name="radius">Circle radius.</param>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the circle in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the circle expresed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Circle.ToPolyline(System.Int32)">
            <summary>
            Converts the circle in a Polyline.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.LwPolyline">LightWeightPolyline</see> that represents the circle.</returns>
        </member>
        <member name="P:netDxf.Entities.Circle.Center">
            <summary>
            Gets or sets the circle <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Radius">
            <summary>
            Gets or set the circle radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Thickness">
            <summary>
            Gets or sets the circle thickness.
            </summary>
        </member>
        <member name="T:netDxf.Entities.EdgeFlags">
            <summary>
            Defines which edges are hidden.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EdgeFlags.Visibles">
            <summary>
            All edges are visible (default).
            </summary>
        </member>
        <member name="F:netDxf.Entities.EdgeFlags.First">
            <summary>
            First edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EdgeFlags.Second">
            <summary>
            Second edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EdgeFlags.Third">
            <summary>
            Third edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EdgeFlags.Fourth">
            <summary>
            Fourth edge is invisible.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Face3d">
            <summary>
            Represents a 3dFace <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3d.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
            <param name="firstVertex">3d face <see cref="T:netDxf.Vector3">first vertex</see>.</param>
            <param name="secondVertex">3d face <see cref="T:netDxf.Vector3">second vertex</see>.</param>
            <param name="thirdVertex">3d face <see cref="T:netDxf.Vector3">third vertex</see>.</param>
            <param name="fourthVertex">3d face <see cref="T:netDxf.Vector3">fourth vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3d.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
            <param name="firstVertex">3d face <see cref="T:netDxf.Vector2">first vertex</see>.</param>
            <param name="secondVertex">3d face <see cref="T:netDxf.Vector2">second vertex</see>.</param>
            <param name="thirdVertex">3d face <see cref="T:netDxf.Vector2">third vertex</see>.</param>
            <param name="fourthVertex">3d face <see cref="T:netDxf.Vector2">fourth vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3d.#ctor">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.FirstVertex">
            <summary>
            Gets or sets the first 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.SecondVertex">
            <summary>
            Gets or sets the second 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.ThirdVertex">
            <summary>
            Gets or sets the third 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.FourthVertex">
            <summary>
            Gets or sets the fourth 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.EdgeFlags">
            <summary>
            Gets or sets the 3d face edge visibility.
            </summary>
        </member>
        <member name="T:netDxf.Entities.PolyfaceMesh">
            <summary>
            Represents a polyface mesh <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.#ctor">
            <summary>
            Initializes a new instance of the <c>PolyfaceMesh</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.#ctor(System.Collections.Generic.List{netDxf.Entities.PolyfaceMeshVertex},System.Collections.Generic.List{netDxf.Entities.PolyfaceMeshFace})">
            <summary>
            Initializes a new instance of the <c>PolyfaceMesh</c> class.
            </summary>
            <param name="vertexes">Polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshVertex">vertex</see> list.</param>
            <param name="faces">Polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshFace">faces</see> list.</param>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.Explode">
            <summary>
            Decompose the actual polyface mesh faces in <see cref="T:netDxf.Entities.Point">points</see> (one vertex polyface mesh face),
            <see cref="T:netDxf.Entities.Line">lines</see> (two vertexes polyface mesh face) and <see cref="T:netDxf.Entities.Face3d">3d faces</see> (three or four vertexes polyface mesh face).
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Face3d">3d faces</see> that made up the polyface mesh.</returns>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Vertexes">
            <summary>
            Gets or sets the polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshVertex">vertexes</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Faces">
            <summary>
            Gets or sets the polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshFace">faces</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Flags">
            <summary>
            Gets the polyface mesh flag type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.EndSequence">
            <summary>
            Gets the end vertex sequence.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Text">
            <summary>
            Represents a Text <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector2,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector3,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Text.Rotation">
            <summary>
            Gets or sets the text rotation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Height">
            <summary>
            Gets or sets the text height.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Style">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.TextStyle">text style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Position">
            <summary>
            Gets or sets Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Value">
            <summary>
            Gets or sets the text string.
            </summary>
        </member>
        <member name="T:netDxf.DxfReader">
            <summary>
            Low level dxf reader
            </summary>
        </member>
        <member name="M:netDxf.DxfReader.Read(System.IO.Stream)">
            <summary>
            Reads the whole stream.
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="T:netDxf.Tables.Layer">
            <summary>
            Represents a layer.
            </summary>
        </member>
        <member name="M:netDxf.Tables.Layer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Layer</c> class.
            </summary>
            <param name="name">Layer name.</param>
        </member>
        <member name="P:netDxf.Tables.Layer.Default">
            <summary>
            Gets the default Layer 0.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.LineType">
            <summary>
            Gets or sets the layer <see cref="P:netDxf.Tables.Layer.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Color">
            <summary>
            Gets or sets the layer <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.IsVisible">
            <summary>
            Gets or sets the layer visibility.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Plot">
            <summary>
            Gets or sets if the plotting flag.
            </summary>
            <remarks>If set to false, do not plot this layer.</remarks>
        </member>
        <member name="P:netDxf.Tables.Layer.Lineweight">
            <summary>
            Gets or sets the entity line weight, one unit is always 1/100 mm (default = Default).
            </summary>
        </member>
        <member name="T:netDxf.MathHelper">
            <summary>
            Utility math functions and constants.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.Epsilon">
            <summary>
            Represents the smallest number.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.DegToRad">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.RadToDeg">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.HalfPI">
            <summary>
            PI/2 (90 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.PI">
            <summary>
            PI (180 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.ThreeHalfPI">
            <summary>
            3*PI/2 (270 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.TwoPI">
            <summary>
            2*PI (360 degrees)
            </summary>
        </member>
        <member name="M:netDxf.MathHelper.ConvertUnit(System.Double,netDxf.DrawingUnits,netDxf.DrawingUnits)">
            <summary>
            Converts a value from one unit to another.
            </summary>
            <param name="value">Number to convert.</param>
            <param name="from">Original value units.</param>
            <param name="to">Destination value units.</param>
            <returns>The converted value to the new units.</returns>
        </member>
        <member name="M:netDxf.MathHelper.ConversionFactor(netDxf.DrawingUnits,netDxf.DrawingUnits)">
            <summary>
            Gets the conversion factor between units.
            </summary>
            <param name="from">Original value units.</param>
            <param name="to">Destination value units.</param>
            <returns>The conversion factor between the passed units.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsOne(System.Double,System.Double)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsZero(System.Double,System.Double)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsEqual(System.Double,System.Double,System.Double)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Double precision number.</param>
            <param name="b">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(netDxf.Vector2,System.Double,netDxf.MathHelper.CoordinateSystem,netDxf.MathHelper.CoordinateSystem)">
            <summary>
            Transforms a point between coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="rotation">Rotation angle in radians.</param>
            <param name="from">Point coordinate system.</param>
            <param name="to">Coordinate system of the transformed point.</param>
            <returns>Transormed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(netDxf.Vector3,netDxf.Vector3,netDxf.MathHelper.CoordinateSystem,netDxf.MathHelper.CoordinateSystem)">
            <summary>
            Transforms a point between coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="from">Point coordinate system.</param>
            <param name="to">Coordinate system of the transformed point.</param>
            <returns>Transormed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(System.Collections.Generic.List{netDxf.Vector3},netDxf.Vector3,netDxf.MathHelper.CoordinateSystem,netDxf.MathHelper.CoordinateSystem)">
            <summary>
            Transforms a point list between coordinate systems.
            </summary>
            <param name="points">Points to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="from">Points coordinate system.</param>
            <param name="to">Coordinate system of the transformed points.</param>
            <returns>Transormed point list.</returns>
        </member>
        <member name="M:netDxf.MathHelper.ArbitraryAxis(netDxf.Vector3)">
            <summary>
            Gets the rotation matrix from the normal vector (extrusion direction) of an entity.
            </summary>
            <param name="zAxis">Normal vector.</param>
            <returns>Rotation matriz.</returns>
        </member>
        <member name="M:netDxf.MathHelper.PointLineDistance(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Calculates the minimum distance between a point and a line.
            </summary>
            <param name="q">A point.</param>
            <param name="origin">Line origin point.</param>
            <param name="dir">Line direction.</param>
            <returns>The minimum distance between the point and the line.</returns>
        </member>
        <member name="M:netDxf.MathHelper.FindIntersection(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2@,System.Double)">
            <summary>
            Calculates the intersection point of two lines.
            </summary>
            <param name="point0">First line origin point.</param>
            <param name="dir0">First line direction.</param>
            <param name="point1">Second line origin point.</param>
            <param name="dir1">Second line direction.</param>
            <param name="intersection">Intersection point of the two lines.</param>
            <returns>0 if there is an intersection point, 1 if the lines are parallel or 2 if the lines are the same.</returns>
        </member>
        <member name="T:netDxf.MathHelper.CoordinateSystem">
            <summary>
            Defines the coordinate system reference.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.CoordinateSystem.World">
            <summary>
            World coordinates.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.CoordinateSystem.Object">
            <summary>
            Object coordinates.
            </summary>
        </member>
        <member name="T:netDxf.Tables.LineType">
            <summary>
            Represents a line type.
            </summary>
            <remarks>
            Only simple line types are supported.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.LineType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>LineType</c> class.
            </summary>
            <param name="name">Line type name.</param>
            <param name="description">Line type description (optional).</param>
        </member>
        <member name="M:netDxf.Tables.LineType.Length">
            <summary>
            Gets the total length of the line type.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LineType.FromFile(System.String,System.String)">
            <summary>
            Creates a new line type from the definition in a lin file.
            </summary>
            <remarks>Only simple line types are supported.</remarks>
            <param name="file">Lin file where the definition is located.</param>
            <param name="lineTypeName">Name of the line type definition that wants to be read (ignore case).</param>
            <returns>A line type defined by the lin file.</returns>
        </member>
        <member name="P:netDxf.Tables.LineType.ByLayer">
            <summary>
            Gets the ByLayer line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.ByBlock">
            <summary>
            Gets the ByBlock line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Continuous">
            <summary>
            Gets a predefined continuous line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Center">
            <summary>
            Gets a predefined center line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.DashDot">
            <summary>
            Gets a predefined dash dot line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Dashed">
            <summary>
            Gets a predefined dashed line
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Dot">
            <summary>
            Gets a predefined dot line
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Description">
            <summary>
            Gets or sets the line type description (optional).
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Segments">
            <summary>
            Gets or stes the list of line type segments.
            </summary>
            <remarks>
            A positive decimal number denotes a pen-down (dash) segment of that length. 
            A negative decimal number denotes a pen-up (space) segment of that length. 
            A dash length of 0 draws a dot. 
            </remarks>
        </member>
        <member name="T:netDxf.Tables.TextStyle">
            <summary>
            Represents a text style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class. The font file name, without the extension, will be used as the TextStyle name.
            </summary>
            <param name="font">Text style font file name.</param>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class.
            </summary>
            <param name="name">Text style name.</param>
            <param name="font">Text style font file name.</param>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Default">
            <summary>
            Gets the default text style.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.FontName">
            <summary>
            Gets the text style font file name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.FontNameWithoutExtension">
            <summary>
            Gets the style font file name without the extension.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>Fixed text height; 0 if not fixed.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
            <remarks>Valid values range from 0.01 to 100. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsVertical">
            <summary>
            Gets or sets the text is vertical.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsBackward">
            <summary>
            Gets or sets if the text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsUpsideDown">
            <summary>
            Gets or sets if the text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="T:netDxf.XData">
            <summary>
            Represents the extended data information of an entity.
            </summary>
        </member>
        <member name="M:netDxf.XData.#ctor(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Initialize a new instance of the <c>XData</c> class .
            </summary>
            <param name="appReg">Name of the application associated with the list of extended data records.</param>
        </member>
        <member name="M:netDxf.XData.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:netDxf.XData.ApplicationRegistry">
            <summary>
            Gets the name of the application associated with the list of extended data records.
            </summary>
        </member>
        <member name="P:netDxf.XData.XDataRecord">
            <summary>
            Gets or sets the list of extended data records.
            </summary>
            <remarks>
            This list cannot contain a XDataRecord with a XDataCode of AppReg, this code is reserved to register the name of the application.
            Any record with this code will be ommited.
            </remarks>
        </member>
        <member name="T:netDxf.StringCode">
            <summary>
            Dxf sections.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.Unknown">
            <summary>
            not defined.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.HeaderSection">
            <summary>
            header.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ClassesSection">
            <summary>
            classes.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.Class">
            <summary>
            class.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.TablesSection">
            <summary>
            tables.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BlocksSection">
            <summary>
            blocks.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EntitiesSection">
            <summary>
            entities.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ObjectsSection">
            <summary>
            objects.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BeginSection">
            <summary>
            dxf name string.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndSection">
            <summary>
            end secction code.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.LayerTable">
            <summary>
            layers.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ViewPortTable">
            <summary>
            view ports.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ViewTable">
            <summary>
            views.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.UcsTable">
            <summary>
            ucs.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BlockRecordTable">
            <summary>
            block records.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.LineTypeTable">
            <summary>
            line types.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.TextStyleTable">
            <summary>
            text styles.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.DimensionStyleTable">
            <summary>
            dim styles.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ApplicationIDTable">
            <summary>
            extended data application registry.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndTable">
            <summary>
            end table code.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.Table">
            <summary>
            dxf name string.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BeginBlock">
            <summary>
            dxf name string.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndBlock">
            <summary>
            end table code.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndSequence">
            <summary>
            end of an element sequence
            </summary>
        </member>
        <member name="F:netDxf.StringCode.Dictionary">
            <summary>
            dictionary
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndOfFile">
            <summary>
            end of file
            </summary>
        </member>
        <member name="T:netDxf.DxfWriter">
            <summary>
            Low level dxf writer.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.Close">
            <summary>
            Closes the dxf file.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.BeginSection(System.String)">
            <summary>
            Opens a new section.
            </summary>
            <param name="section">Section type to open.</param>
            <remarks>There can be only one type section.</remarks>
        </member>
        <member name="M:netDxf.DxfWriter.EndSection">
            <summary>
            Closes the active section.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.BeginTable(System.String,System.String)">
            <summary>
            Opens a new table.
            </summary>
            <param name="table">Table type to open.</param>
            <param name="handle">Handle assigned to this table</param>
        </member>
        <member name="M:netDxf.DxfWriter.EndTable">
            <summary>
            Closes the active table.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.RegisterApplication(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Writes a new extended data application registry to the table section.
            </summary>
            <param name="appReg">Name of the application registry.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteViewPort(netDxf.Tables.ViewPort)">
            <summary>
            Writes a new view port to the table section.
            </summary>
            <param name="vp">Viewport.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteDimensionStyle(netDxf.Tables.DimensionStyle)">
            <summary>
            Writes a new dimension style to the table section.
            </summary>
            <param name="style">DimensionStyle.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteBlockRecord(netDxf.Tables.BlockRecord)">
            <summary>
            Writes a new block record to the table section.
            </summary>
            <param name="blockRecord">Block.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteLineType(netDxf.Tables.LineType)">
            <summary>
            Writes a new line type to the table section.
            </summary>
            <param name="tl">Line type.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteLayer(netDxf.Tables.Layer)">
            <summary>
            Writes a new layer to the table section.
            </summary>
            <param name="layer">Layer.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteTextStyle(netDxf.Tables.TextStyle)">
            <summary>
            Writes a new text style to the table section.
            </summary>
            <param name="style">TextStyle.</param>
        </member>
        <member name="P:netDxf.DxfWriter.ActiveSection">
            <summary>
            Gets the active section.
            </summary>
        </member>
        <member name="P:netDxf.DxfWriter.Version">
            <summary>
            Gets the dxf file version.
            </summary>
        </member>
        <member name="T:netDxf.XDataCode">
            <summary>
            Defines the extended data code.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.String">
            <summary>
            Strings in extended data can be up to 255 bytes long.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.AppReg">
            <summary>
            Application names can be up to 31 bytes long.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.ControlString">
            <summary>
            An extended data control string can be either “{”or “}”.
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.LayerName">
            <summary>
            Name of the layer associated with the extended data
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.BinaryData">
            <summary>
            Binary data is organized into variable-length chunks.
            The maximum length of each chunk is 127 bytes.
            In ASCII DXF files, binary data is represented as a string of hexadecimal digits, two per binary byte
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.DatabaseHandle">
            <summary>
            Handles of entities in the drawing database
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealX">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealY">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealZ">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionX">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionY">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionZ">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementX">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementY">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementZ">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionX">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionY">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionZ">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Real">
            <summary>
            A real value.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Distance">
            <summary>
            A real value that is scaled along with the parent entity
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.ScaleFactor">
            <summary>
            Also a real value that is scaled along with the parent.
            The difference between a distance and a scale factor is application-defined
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Integer">
            <summary>
            A 16-bit integer (signed or unsigned)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Long">
            <summary>
            A 32-bit signed (long) integer
            </summary>
        </member>
        <member name="T:netDxf.XDataRecord">
            <summary>
            Represents an entry in the extended data of an entity.
            </summary>
        </member>
        <member name="M:netDxf.XDataRecord.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new XDataRecord.
            </summary>
            <param name="code">XData code.</param>
            <param name="value">XData value.</param>
        </member>
        <member name="M:netDxf.XDataRecord.ToString">
            <summary>
            Obtains a string that represents the XDataRecord.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="P:netDxf.XDataRecord.OpenControlString">
            <summary>
            An extended data control string can be either “{”or “}”.
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested
            </summary>
        </member>
        <member name="P:netDxf.XDataRecord.CloseControlString">
            <summary>
            An extended data control string can be either "{" or "}".
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested
            </summary>
        </member>
        <member name="P:netDxf.XDataRecord.Code">
            <summary>
            Gets or set the XData code.
            </summary>
        </member>
        <member name="P:netDxf.XDataRecord.Value">
            <summary>
            Gets or sets the XData value.
            </summary>
        </member>
    </members>
</doc>
